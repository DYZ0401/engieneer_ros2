/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2024-10-10 04:09:34.313212
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63;
x0=IKsin(j[3]);
x1=IKcos(j[3]);
x2=IKcos(j[4]);
x3=IKsin(j[4]);
x4=IKcos(j[5]);
x5=IKsin(j[5]);
x6=IKcos(j[6]);
x7=IKsin(j[6]);
x8=IKcos(j[7]);
x9=IKsin(j[7]);
x10=((0.999999999908557)*x0);
x11=((9.10415855631597e-6)*x1);
x12=((4.99999825131179e-6)*x2);
x13=((0.499999825131179)*x3);
x14=((0.671658667861316)*x5);
x15=((0.866025504730542)*x4);
x16=((0.499999825156179)*x3);
x17=((0.499999825156179)*x2);
x18=((0.867716279215787)*x7);
x19=((0.497059814090729)*x6);
x20=((0.867716279215787)*x6);
x21=((0.740860738524294)*x5);
x22=((0.497059814090729)*x7);
x23=((-0.499999825156179)*x2);
x24=((-0.499999825156179)*x3);
x25=((((9.99999999908557e-6)*x0))+(((-9.10415855631597e-11)*x1)));
x26=((((-1.0)*x11))+x10);
x27=((((-9.10415855677118e-6)*x1))+(((0.999999999958557)*x0)));
x28=((((9.10415855677118e-6)*x0))+(((0.999999999958557)*x1)));
x29=((((-9.99999999908557e-6)*x1))+(((-9.10415855631597e-11)*x0)));
x30=((((9.10415855631597e-6)*x0))+(((0.999999999908557)*x1)));
x31=((-1.0)*x30);
x32=((((-0.866025504687241)*x2))+(((-8.66025504687241e-6)*x3)));
x33=((((0.99999999995)*x2))+(((9.9999999995e-6)*x3)));
x34=((-1.0)*x33);
x35=((((4.99999825131179e-6)*x3))+(((0.499999825131179)*x2)));
x36=(x25*x3);
x37=(x2*x26);
x38=(x27*x5);
x39=((0.866025504730542)*x38);
x40=(x32*x4);
x41=(x33*x8);
x42=(x34*x9);
x43=(x29*x3);
x44=(x28*x5);
x45=(x35*x4);
x46=(x40+x13);
x47=((((0.866025504687241)*x3))+x45+(((-8.66025504687241e-6)*x2)));
x48=((((-1.0)*x12))+x46);
x49=(((x3*(((((-1.0)*x10))+x11))))+((x2*x25)));
x50=((0.867716279215787)*x47);
x51=((((-1.0)*x40))+(((-0.499999825131179)*x3))+x12);
x52=(x47*x7);
x53=(((x3*x30))+((x2*x29)));
x54=(x4*x49);
x55=(x15*x53);
x56=(x39+x55);
x57=((((-0.499999825156179)*x54))+(((-0.866025504730542)*x37))+(((-0.866025504730542)*x36))+(((-0.499999825156179)*x44)));
x58=((((-0.866025504730542)*x43))+(((-0.499999825156179)*x38))+(((-0.499999825156179)*x4*x53))+(((-0.866025504730542)*x2*x31)));
x59=((((-1.0)*x20*x48))+(((-1.0)*x18*x47))+((x19*x47))+((x22*x51)));
x60=((0.671658667861316)*x59);
x61=((0.740860738524294)*x59);
x62=(x59*x8);
x63=(x59*x9);
IkReal x64=((0.866025504730542)*x44);
eerot[0]=(((x19*((((x23*x26))+((x15*x49))+x64+((x24*x25))))))+((x20*x57))+((x18*(((((-0.866025504730542)*x54))+((x16*x25))+((x17*x26))+(((-1.0)*x64))))))+((x22*x57)));
eerot[1]=((((((((-0.671658667861316)*(((((-1.0)*(((((-9.99999999908557e-6)*(IKsin(j[3]))))+(((9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-1.0)*(((((0.999999999908557)*(IKsin(j[3]))))+(((-9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((-0.671658667861316)*(((((-0.999999999958557)*(IKcos(j[3]))))+(((-9.10415855677118e-6)*(IKsin(j[3]))))))*(IKcos(j[5]))))))*(IKsin(j[7]))))+(((((((0.740860738524294)*(((((((((0.999999999908557)*(IKsin(j[3]))))+(((-9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((-9.99999999908557e-6)*(IKsin(j[3]))))+(((9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((0.740860738524294)*(((((0.999999999958557)*(IKcos(j[3]))))+(((9.10415855677118e-6)*(IKsin(j[3]))))))*(IKcos(j[5]))))))*(IKcos(j[7]))))+(((((((-0.671658667861316)*(((((-0.867716279215787)*(((((0.866025504694652)*(IKcos(j[3]))))+(((7.88443350927465e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((-0.867716279215787)*(((((-4.99999825110457e-6)*(IKsin(j[3]))))+(((4.55207768635211e-11)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.867716279215787)*(((((-0.499999825110457)*(IKsin(j[3]))))+(((4.55207768635211e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.867716279215787)*(((((0.866025504730542)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.866025504730542)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-0.671658667861316)*(((((0.497059814090729)*(((((-0.866025504730542)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.866025504730542)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((0.497059814090729)*(((((-4.55207768635211e-11)*(IKcos(j[3]))))+(((4.99999825110457e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.497059814090729)*(((((-0.866025504694652)*(IKcos(j[3]))))+(((-7.88443350927465e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((0.497059814090729)*(((((-4.55207768635211e-6)*(IKcos(j[3]))))+(((0.499999825110457)*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((-0.671658667861316)*(((((-0.867716279215787)*(((((-0.499999825156179)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.499999825156179)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.867716279215787)*(((((7.88443350888043e-11)*(IKcos(j[3]))))+(((-8.66025504651351e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-0.867716279215787)*(((((-0.866025504651351)*(IKsin(j[3]))))+(((7.88443350888043e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.867716279215787)*(((((-0.499999825135457)*(IKcos(j[3]))))+(((-4.55207768657972e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.671658667861316)*(((((0.497059814090729)*(((((-0.499999825135457)*(IKcos(j[3]))))+(((-4.55207768657972e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((0.497059814090729)*(((((7.88443350888043e-11)*(IKcos(j[3]))))+(((-8.66025504651351e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.497059814090729)*(((((-0.499999825156179)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.499999825156179)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((0.497059814090729)*(((((-0.866025504651351)*(IKsin(j[3]))))+(((7.88443350888043e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((((((0.740860738524294)*(((((-0.867716279215787)*(((((0.866025504694652)*(IKcos(j[3]))))+(((7.88443350927465e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((-0.867716279215787)*(((((-4.99999825110457e-6)*(IKsin(j[3]))))+(((4.55207768635211e-11)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.867716279215787)*(((((-0.499999825110457)*(IKsin(j[3]))))+(((4.55207768635211e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.867716279215787)*(((((0.866025504730542)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.866025504730542)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((0.740860738524294)*(((((0.497059814090729)*(((((-0.866025504730542)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.866025504730542)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((0.497059814090729)*(((((-4.55207768635211e-11)*(IKcos(j[3]))))+(((4.99999825110457e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.497059814090729)*(((((-0.866025504694652)*(IKcos(j[3]))))+(((-7.88443350927465e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((0.497059814090729)*(((((-4.55207768635211e-6)*(IKcos(j[3]))))+(((0.499999825110457)*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((0.740860738524294)*(((((0.497059814090729)*(((((-0.499999825135457)*(IKcos(j[3]))))+(((-4.55207768657972e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((0.497059814090729)*(((((7.88443350888043e-11)*(IKcos(j[3]))))+(((-8.66025504651351e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.497059814090729)*(((((-0.499999825156179)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.499999825156179)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((0.497059814090729)*(((((-0.866025504651351)*(IKsin(j[3]))))+(((7.88443350888043e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[6]))))+(((0.740860738524294)*(((((-0.867716279215787)*(((((-0.499999825156179)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.499999825156179)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.867716279215787)*(((((7.88443350888043e-11)*(IKcos(j[3]))))+(((-8.66025504651351e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-0.867716279215787)*(((((-0.866025504651351)*(IKsin(j[3]))))+(((7.88443350888043e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.867716279215787)*(((((-0.499999825135457)*(IKcos(j[3]))))+(((-4.55207768657972e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7])))));
eerot[2]=((((((((-0.671658667861316)*(((((-0.867716279215787)*(((((0.866025504694652)*(IKcos(j[3]))))+(((7.88443350927465e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((-0.867716279215787)*(((((-4.99999825110457e-6)*(IKsin(j[3]))))+(((4.55207768635211e-11)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.867716279215787)*(((((-0.499999825110457)*(IKsin(j[3]))))+(((4.55207768635211e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.867716279215787)*(((((0.866025504730542)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.866025504730542)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-0.671658667861316)*(((((0.497059814090729)*(((((-0.866025504730542)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.866025504730542)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((0.497059814090729)*(((((-4.55207768635211e-11)*(IKcos(j[3]))))+(((4.99999825110457e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.497059814090729)*(((((-0.866025504694652)*(IKcos(j[3]))))+(((-7.88443350927465e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((0.497059814090729)*(((((-4.55207768635211e-6)*(IKcos(j[3]))))+(((0.499999825110457)*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((-0.671658667861316)*(((((-0.867716279215787)*(((((-0.499999825156179)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.499999825156179)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.867716279215787)*(((((7.88443350888043e-11)*(IKcos(j[3]))))+(((-8.66025504651351e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-0.867716279215787)*(((((-0.866025504651351)*(IKsin(j[3]))))+(((7.88443350888043e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.867716279215787)*(((((-0.499999825135457)*(IKcos(j[3]))))+(((-4.55207768657972e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.671658667861316)*(((((0.497059814090729)*(((((-0.499999825135457)*(IKcos(j[3]))))+(((-4.55207768657972e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((0.497059814090729)*(((((7.88443350888043e-11)*(IKcos(j[3]))))+(((-8.66025504651351e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.497059814090729)*(((((-0.499999825156179)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.499999825156179)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((0.497059814090729)*(((((-0.866025504651351)*(IKsin(j[3]))))+(((7.88443350888043e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[6]))))))*(IKsin(j[7]))))+(((((((-0.740860738524294)*(((((-1.0)*(((((-9.99999999908557e-6)*(IKsin(j[3]))))+(((9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-1.0)*(((((0.999999999908557)*(IKsin(j[3]))))+(((-9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((-0.740860738524294)*(((((-0.999999999958557)*(IKcos(j[3]))))+(((-9.10415855677118e-6)*(IKsin(j[3]))))))*(IKcos(j[5]))))))*(IKsin(j[7]))))+(((((((-0.740860738524294)*(((((-0.867716279215787)*(((((0.866025504694652)*(IKcos(j[3]))))+(((7.88443350927465e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((-0.867716279215787)*(((((-4.99999825110457e-6)*(IKsin(j[3]))))+(((4.55207768635211e-11)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.867716279215787)*(((((-0.499999825110457)*(IKsin(j[3]))))+(((4.55207768635211e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.867716279215787)*(((((0.866025504730542)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.866025504730542)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-0.740860738524294)*(((((0.497059814090729)*(((((-0.866025504730542)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.866025504730542)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((0.497059814090729)*(((((-4.55207768635211e-11)*(IKcos(j[3]))))+(((4.99999825110457e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.497059814090729)*(((((-0.866025504694652)*(IKcos(j[3]))))+(((-7.88443350927465e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((0.497059814090729)*(((((-4.55207768635211e-6)*(IKcos(j[3]))))+(((0.499999825110457)*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((-0.740860738524294)*(((((-0.867716279215787)*(((((-0.499999825156179)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.499999825156179)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.867716279215787)*(((((7.88443350888043e-11)*(IKcos(j[3]))))+(((-8.66025504651351e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-0.867716279215787)*(((((-0.866025504651351)*(IKsin(j[3]))))+(((7.88443350888043e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.867716279215787)*(((((-0.499999825135457)*(IKcos(j[3]))))+(((-4.55207768657972e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.740860738524294)*(((((0.497059814090729)*(((((-0.499999825135457)*(IKcos(j[3]))))+(((-4.55207768657972e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((0.497059814090729)*(((((7.88443350888043e-11)*(IKcos(j[3]))))+(((-8.66025504651351e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.497059814090729)*(((((-0.499999825156179)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.499999825156179)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((0.497059814090729)*(((((-0.866025504651351)*(IKsin(j[3]))))+(((7.88443350888043e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((((((-0.671658667861316)*(((((0.999999999958557)*(IKcos(j[3]))))+(((9.10415855677118e-6)*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((-0.671658667861316)*(((((((((0.999999999908557)*(IKsin(j[3]))))+(((-9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((-9.99999999908557e-6)*(IKsin(j[3]))))+(((9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))))*(IKcos(j[7])))));
eetrans[0]=((-0.35928058379861)+(((((((((((1.67646326546233e-13)*(IKsin(j[3]))))+(((-1.52627873840039e-18)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((1.67646326546233e-8)*(IKsin(j[3]))))+(((-1.52627873840039e-13)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((9.67906066403183e-9)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((9.67906066403183e-9)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((9.6790606636307e-9)*(IKcos(j[3]))))+(((8.81197029659527e-14)*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((-0.0453547206418719)*(((((-0.499999825156179)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.499999825156179)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.0453547206418719)*(((((-0.499999825135457)*(IKcos(j[3]))))+(((-4.55207768657972e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((-0.0453547206418719)*(((((7.88443350888043e-11)*(IKcos(j[3]))))+(((-8.66025504651351e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-0.0453547206418719)*(((((-0.866025504651351)*(IKsin(j[3]))))+(((7.88443350888043e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((((((((((8.74308623834483e-14)*(IKcos(j[3]))))+(((-9.603398472756e-9)*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-5.04782083996078e-14)*(IKsin(j[3]))))+(((-5.5445221085229e-9)*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((((((-5.54452210875269e-9)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-5.54452210875269e-9)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((8.74308623834482e-19)*(IKcos(j[3]))))+(((-9.603398472756e-14)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((0.000298320282733843)*(IKcos(j[3]))))+(((((((1.66999999986829e-6)*(IKsin(j[3]))))+(((-1.52039447892389e-11)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((-1.65695685727545e-6)*(IKcos(j[3]))))+(((0.181999999986207)*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-0.0791756410890481)*(((((-0.499999825135457)*(IKcos(j[3]))))+(((-4.55207768657972e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((-0.0791756410890481)*(((((7.88443350888043e-11)*(IKcos(j[3]))))+(((-8.66025504651351e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-0.0791756410890481)*(((((-0.499999825156179)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.499999825156179)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.0791756410890481)*(((((-0.866025504651351)*(IKsin(j[3]))))+(((7.88443350888043e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[6]))))+(((((((((((-5.04782083970839e-14)*(IKcos(j[3]))))+(((5.54452210824568e-9)*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((5.54452210824568e-14)*(IKsin(j[3]))))+(((-5.04782083970838e-19)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((-9.60339847363417e-9)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-9.60339847363417e-9)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((-8.74308623878198e-14)*(IKsin(j[3]))))+(((-9.60339847323617e-9)*(IKcos(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((-0.0453547206418719)*(((((-0.499999825110457)*(IKsin(j[3]))))+(((4.55207768635211e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.0453547206418719)*(((((-4.99999825110457e-6)*(IKsin(j[3]))))+(((4.55207768635211e-11)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.0453547206418719)*(((((0.866025504730542)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.866025504730542)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.0453547206418719)*(((((0.866025504694652)*(IKcos(j[3]))))+(((7.88443350927465e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((0.184500002723601)*(IKsin(j[3]))))+(((((((-0.0791756410890481)*(((((-0.866025504694652)*(IKcos(j[3]))))+(((-7.88443350927465e-6)*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((-0.0791756410890481)*(((((-4.55207768635211e-6)*(IKcos(j[3]))))+(((0.499999825110457)*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.0791756410890481)*(((((-4.55207768635211e-11)*(IKcos(j[3]))))+(((4.99999825110457e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-0.0791756410890481)*(((((-0.866025504730542)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.866025504730542)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((((((-1.52627873847671e-13)*(IKsin(j[3]))))+(((-1.67646326554615e-8)*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((((((-1.67646326561563e-8)*(((((9.99999999908557e-6)*(IKsin(j[3]))))+(((-9.10415855631597e-11)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-1.67646326561563e-8)*(((((-0.999999999908557)*(IKsin(j[3]))))+(((9.10415855631597e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((9.67906066314675e-9)*(IKsin(j[3]))))+(((-8.81197029615467e-14)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((-8.81197029615467e-19)*(IKcos(j[3]))))+(((9.67906066314675e-14)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((0.999999999958557)*j[2])));
eerot[3]=(((x19*((((x23*x31))+x56+((x24*x29))))))+((x18*((((x17*x31))+((x16*x29))+(((-1.0)*x56))))))+((x20*x58))+((x22*x58)));
eerot[4]=((((((((-0.671658667861316)*(((((0.497059814090729)*(((((-4.55207768635211e-6)*(IKsin(j[3]))))+(((-0.499999825110457)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.497059814090729)*(((((-0.866025504730542)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.866025504730542)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((0.497059814090729)*(((((-4.55207768635211e-11)*(IKsin(j[3]))))+(((-4.99999825110457e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.497059814090729)*(((((7.88443350927465e-6)*(IKcos(j[3]))))+(((-0.866025504694652)*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.671658667861316)*(((((0.497059814090729)*(((((-0.499999825135457)*(IKsin(j[3]))))+(((4.55207768657972e-6)*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((0.497059814090729)*(((((7.88443350888043e-11)*(IKsin(j[3]))))+(((8.66025504651351e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.497059814090729)*(((((0.866025504651351)*(IKcos(j[3]))))+(((7.88443350888043e-6)*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.497059814090729)*(((((-0.499999825156179)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.499999825156179)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-0.671658667861316)*(((((-0.867716279215787)*(((((4.55207768635211e-11)*(IKsin(j[3]))))+(((4.99999825110457e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.867716279215787)*(((((0.866025504694652)*(IKsin(j[3]))))+(((-7.88443350927465e-6)*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((-0.867716279215787)*(((((4.55207768635211e-6)*(IKsin(j[3]))))+(((0.499999825110457)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.867716279215787)*(((((0.866025504730542)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.866025504730542)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-0.671658667861316)*(((((-0.867716279215787)*(((((-0.499999825156179)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.499999825156179)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((-0.867716279215787)*(((((7.88443350888043e-11)*(IKsin(j[3]))))+(((8.66025504651351e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.867716279215787)*(((((0.866025504651351)*(IKcos(j[3]))))+(((7.88443350888043e-6)*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.867716279215787)*(((((-0.499999825135457)*(IKsin(j[3]))))+(((4.55207768657972e-6)*(IKcos(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((0.740860738524294)*(((((-0.867716279215787)*(((((4.55207768635211e-11)*(IKsin(j[3]))))+(((4.99999825110457e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.867716279215787)*(((((0.866025504694652)*(IKsin(j[3]))))+(((-7.88443350927465e-6)*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((-0.867716279215787)*(((((4.55207768635211e-6)*(IKsin(j[3]))))+(((0.499999825110457)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.867716279215787)*(((((0.866025504730542)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.866025504730542)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((0.740860738524294)*(((((0.497059814090729)*(((((-4.55207768635211e-6)*(IKsin(j[3]))))+(((-0.499999825110457)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.497059814090729)*(((((-0.866025504730542)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.866025504730542)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((0.497059814090729)*(((((-4.55207768635211e-11)*(IKsin(j[3]))))+(((-4.99999825110457e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.497059814090729)*(((((7.88443350927465e-6)*(IKcos(j[3]))))+(((-0.866025504694652)*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((0.740860738524294)*(((((0.497059814090729)*(((((-0.499999825135457)*(IKsin(j[3]))))+(((4.55207768657972e-6)*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((0.497059814090729)*(((((7.88443350888043e-11)*(IKsin(j[3]))))+(((8.66025504651351e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.497059814090729)*(((((0.866025504651351)*(IKcos(j[3]))))+(((7.88443350888043e-6)*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.497059814090729)*(((((-0.499999825156179)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.499999825156179)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((0.740860738524294)*(((((-0.867716279215787)*(((((-0.499999825156179)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.499999825156179)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((-0.867716279215787)*(((((7.88443350888043e-11)*(IKsin(j[3]))))+(((8.66025504651351e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.867716279215787)*(((((0.866025504651351)*(IKcos(j[3]))))+(((7.88443350888043e-6)*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.867716279215787)*(((((-0.499999825135457)*(IKsin(j[3]))))+(((4.55207768657972e-6)*(IKcos(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((0.740860738524294)*(((((((((-9.10415855631597e-6)*(IKsin(j[3]))))+(((-0.999999999908557)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((9.99999999908557e-6)*(IKcos(j[3]))))+(((9.10415855631597e-11)*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((0.740860738524294)*(((((-9.10415855677118e-6)*(IKcos(j[3]))))+(((0.999999999958557)*(IKsin(j[3]))))))*(IKcos(j[5]))))))*(IKcos(j[7]))))+(((((((-0.671658667861316)*(((((-1.0)*(((((9.99999999908557e-6)*(IKcos(j[3]))))+(((9.10415855631597e-11)*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-1.0)*(((((-9.10415855631597e-6)*(IKsin(j[3]))))+(((-0.999999999908557)*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((-0.671658667861316)*(((((-0.999999999958557)*(IKsin(j[3]))))+(((9.10415855677118e-6)*(IKcos(j[3]))))))*(IKcos(j[5]))))))*(IKsin(j[7])))));
eerot[5]=((((((((-0.740860738524294)*(((((-0.999999999958557)*(IKsin(j[3]))))+(((9.10415855677118e-6)*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((-0.740860738524294)*(((((-1.0)*(((((9.99999999908557e-6)*(IKcos(j[3]))))+(((9.10415855631597e-11)*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-1.0)*(((((-9.10415855631597e-6)*(IKsin(j[3]))))+(((-0.999999999908557)*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-0.740860738524294)*(((((-0.867716279215787)*(((((4.55207768635211e-11)*(IKsin(j[3]))))+(((4.99999825110457e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.867716279215787)*(((((0.866025504694652)*(IKsin(j[3]))))+(((-7.88443350927465e-6)*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((-0.867716279215787)*(((((4.55207768635211e-6)*(IKsin(j[3]))))+(((0.499999825110457)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.867716279215787)*(((((0.866025504730542)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.866025504730542)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-0.740860738524294)*(((((-0.867716279215787)*(((((-0.499999825156179)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.499999825156179)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((-0.867716279215787)*(((((7.88443350888043e-11)*(IKsin(j[3]))))+(((8.66025504651351e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.867716279215787)*(((((0.866025504651351)*(IKcos(j[3]))))+(((7.88443350888043e-6)*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.867716279215787)*(((((-0.499999825135457)*(IKsin(j[3]))))+(((4.55207768657972e-6)*(IKcos(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.740860738524294)*(((((0.497059814090729)*(((((-4.55207768635211e-6)*(IKsin(j[3]))))+(((-0.499999825110457)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.497059814090729)*(((((-0.866025504730542)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.866025504730542)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((0.497059814090729)*(((((-4.55207768635211e-11)*(IKsin(j[3]))))+(((-4.99999825110457e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.497059814090729)*(((((7.88443350927465e-6)*(IKcos(j[3]))))+(((-0.866025504694652)*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.740860738524294)*(((((0.497059814090729)*(((((-0.499999825135457)*(IKsin(j[3]))))+(((4.55207768657972e-6)*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((0.497059814090729)*(((((7.88443350888043e-11)*(IKsin(j[3]))))+(((8.66025504651351e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.497059814090729)*(((((0.866025504651351)*(IKcos(j[3]))))+(((7.88443350888043e-6)*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.497059814090729)*(((((-0.499999825156179)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.499999825156179)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((((((-0.671658667861316)*(((((0.497059814090729)*(((((-4.55207768635211e-6)*(IKsin(j[3]))))+(((-0.499999825110457)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.497059814090729)*(((((-0.866025504730542)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.866025504730542)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((0.497059814090729)*(((((-4.55207768635211e-11)*(IKsin(j[3]))))+(((-4.99999825110457e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.497059814090729)*(((((7.88443350927465e-6)*(IKcos(j[3]))))+(((-0.866025504694652)*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.671658667861316)*(((((0.497059814090729)*(((((-0.499999825135457)*(IKsin(j[3]))))+(((4.55207768657972e-6)*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((0.497059814090729)*(((((7.88443350888043e-11)*(IKsin(j[3]))))+(((8.66025504651351e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.497059814090729)*(((((0.866025504651351)*(IKcos(j[3]))))+(((7.88443350888043e-6)*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.497059814090729)*(((((-0.499999825156179)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.499999825156179)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-0.671658667861316)*(((((-0.867716279215787)*(((((4.55207768635211e-11)*(IKsin(j[3]))))+(((4.99999825110457e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.867716279215787)*(((((0.866025504694652)*(IKsin(j[3]))))+(((-7.88443350927465e-6)*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((-0.867716279215787)*(((((4.55207768635211e-6)*(IKsin(j[3]))))+(((0.499999825110457)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.867716279215787)*(((((0.866025504730542)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.866025504730542)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-0.671658667861316)*(((((-0.867716279215787)*(((((-0.499999825156179)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.499999825156179)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((-0.867716279215787)*(((((7.88443350888043e-11)*(IKsin(j[3]))))+(((8.66025504651351e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.867716279215787)*(((((0.866025504651351)*(IKcos(j[3]))))+(((7.88443350888043e-6)*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.867716279215787)*(((((-0.499999825135457)*(IKsin(j[3]))))+(((4.55207768657972e-6)*(IKcos(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-0.671658667861316)*(((((((((-9.10415855631597e-6)*(IKsin(j[3]))))+(((-0.999999999908557)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((9.99999999908557e-6)*(IKcos(j[3]))))+(((9.10415855631597e-11)*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((-0.671658667861316)*(((((-9.10415855677118e-6)*(IKcos(j[3]))))+(((0.999999999958557)*(IKsin(j[3]))))))*(IKcos(j[5]))))))*(IKcos(j[7])))));
eetrans[1]=((0.0831423376756697)+(((((((-1.52039447892389e-11)*(IKsin(j[3]))))+(((-1.66999999986829e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-9.10415855677118e-6)*j[2]))+(((((((-0.0791756410890481)*(((((0.866025504651351)*(IKcos(j[3]))))+(((7.88443350888043e-6)*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.0791756410890481)*(((((7.88443350888043e-11)*(IKsin(j[3]))))+(((8.66025504651351e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.0791756410890481)*(((((-0.499999825135457)*(IKsin(j[3]))))+(((4.55207768657972e-6)*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((-0.0791756410890481)*(((((-0.499999825156179)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.499999825156179)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((0.000298320282733843)*(IKsin(j[3]))))+(((((((-0.0791756410890481)*(((((-4.55207768635211e-11)*(IKsin(j[3]))))+(((-4.99999825110457e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.0791756410890481)*(((((-0.866025504730542)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.866025504730542)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((-0.0791756410890481)*(((((-4.55207768635211e-6)*(IKsin(j[3]))))+(((-0.499999825110457)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.0791756410890481)*(((((7.88443350927465e-6)*(IKcos(j[3]))))+(((-0.866025504694652)*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*j[1]))+(((-0.184500002723601)*(IKcos(j[3]))))+(((((((-0.0453547206418719)*(((((7.88443350888043e-11)*(IKsin(j[3]))))+(((8.66025504651351e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.0453547206418719)*(((((-0.499999825135457)*(IKsin(j[3]))))+(((4.55207768657972e-6)*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((-0.0453547206418719)*(((((-0.499999825156179)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.499999825156179)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((-0.0453547206418719)*(((((0.866025504651351)*(IKcos(j[3]))))+(((7.88443350888043e-6)*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((((((((((9.603398472756e-9)*(IKcos(j[3]))))+(((8.74308623834483e-14)*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-5.54452210875269e-9)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-5.54452210875269e-9)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((-5.5445221085229e-9)*(IKsin(j[3]))))+(((5.04782083996078e-14)*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((((((9.603398472756e-14)*(IKcos(j[3]))))+(((8.74308623834482e-19)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((((((((((-5.54452210824568e-9)*(IKcos(j[3]))))+(((-5.04782083970839e-14)*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((8.74308623878198e-14)*(IKcos(j[3]))))+(((-9.60339847323617e-9)*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((-9.60339847363417e-9)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-9.60339847363417e-9)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((-5.54452210824568e-14)*(IKcos(j[3]))))+(((-5.04782083970838e-19)*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[6]))))+(((((((-0.0453547206418719)*(((((0.866025504694652)*(IKsin(j[3]))))+(((-7.88443350927465e-6)*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((-0.0453547206418719)*(((((4.55207768635211e-6)*(IKsin(j[3]))))+(((0.499999825110457)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.0453547206418719)*(((((0.866025504730542)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.866025504730542)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.0453547206418719)*(((((4.55207768635211e-11)*(IKsin(j[3]))))+(((4.99999825110457e-6)*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((((((((((9.6790606636307e-9)*(IKsin(j[3]))))+(((-8.81197029659527e-14)*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((((((-1.67646326546233e-13)*(IKcos(j[3]))))+(((-1.52627873840039e-18)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((9.67906066403183e-9)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((9.67906066403183e-9)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((-1.67646326546233e-8)*(IKcos(j[3]))))+(((-1.52627873840039e-13)*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((((((-1.65695685727545e-6)*(IKsin(j[3]))))+(((-0.181999999986207)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((((((-1.67646326561563e-8)*(((((0.999999999908557)*(IKcos(j[3]))))+(((9.10415855631597e-6)*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-1.67646326561563e-8)*(((((-9.10415855631597e-11)*(IKsin(j[3]))))+(((-9.99999999908557e-6)*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((-8.81197029615467e-19)*(IKsin(j[3]))))+(((-9.67906066314675e-14)*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((-8.81197029615467e-14)*(IKsin(j[3]))))+(((-9.67906066314675e-9)*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((1.52627873847671e-13)*(IKcos(j[3]))))+(((-1.67646326554615e-8)*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKcos(j[6])))));
eerot[6]=(((x20*x47))+((x19*x48))+((x18*x51))+((x22*x47)));
eerot[7]=((((-1.0)*x60*x8))+(((-1.0)*x14*x42))+((x21*x41))+((x61*x9)));
eerot[8]=((((-1.0)*x60*x9))+(((-1.0)*x14*x41))+(((-1.0)*x21*x42))+(((-1.0)*x61*x8)));
eetrans[2]=((0.30533)+((x7*(((((1.6764632655318e-13)*x2))+(((-1.93581280973618e-8)*x45))+(((-1.6764632655318e-8)*x3))))))+(((-0.0453547206418719)*x52))+(((-0.0453547206418719)*x6*(((((-4.99999825131179e-6)*x2))+x46))))+(((-0.0791756410890481)*x7*(((((-1.0)*x40))+(((-1.0)*x13))+x12))))+((x7*(((((-1.10890480952085e-8)*x40))+(((-5.54452210847546e-9)*x3))+(((5.54452210847546e-14)*x2))))))+((x6*(((((-1.93581280973618e-8)*x40))+(((-9.67906066354787e-9)*x3))+(((9.67906066354787e-14)*x2))))))+(((-0.0791756410890481)*x47*x6))+j[0]+(((-0.18199999999375)*x3))+((x6*(((((1.10890480952085e-8)*x45))+(((9.603398473154e-9)*x3))+(((-9.60339847315399e-14)*x2))))))+(((1.6699999999375e-6)*x2)));
}

IKFAST_API int GetNumFreeParameters() { return 2; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2, 3}; return freeparams; }
IKFAST_API int GetNumJoints() { return 8; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij2[2], _nj2,_ij3[2], _nj3;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0;  _ij3[0] = -1; _ij3[1] = -1; _nj3 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]), htj2=tan(pfree[0]*0.5);
j3=pfree[1]; cj3=cos(pfree[1]); sj3=sin(pfree[1]), htj3=tan(pfree[1]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((0.740860738524294)*r01))+(((-0.671658667861316)*r02)));
new_r01=((((-0.671658667861316)*r01))+(((-0.740860738524294)*r02)));
new_r02=((-1.0)*r00);
new_px=((0.28843084)+(((0.0912460017006992)*r00))+px);
new_r10=((((0.740860738524294)*r11))+(((-0.671658667861316)*r12)));
new_r11=((((-0.671658667861316)*r11))+(((-0.740860738524294)*r12)));
new_r12=((-1.0)*r10);
new_py=((-0.13550106)+(((0.0912460017006992)*r10))+py);
new_r20=((((0.740860738524294)*r21))+(((-0.671658667861316)*r22)));
new_r21=((((-0.671658667861316)*r21))+(((-0.740860738524294)*r22)));
new_r22=((-1.0)*r20);
new_pz=((-0.20943)+pz+(((0.0912460017006992)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x65=((1.0)*px);
IkReal x66=((1.0)*pz);
IkReal x67=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x67))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x66)));
rxp0_2=((((-1.0)*r10*x65))+((py*r00)));
rxp1_0=((((-1.0)*r21*x67))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x66)));
rxp1_2=((((-1.0)*r11*x65))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x67)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x66)));
rxp2_2=((((-1.0)*r12*x65))+((py*r02)));
{
IkReal j4eval[2];
j4eval[0]=((((2380952.38105105)*(IKabs(((((5.18937037735957e-7)*cj3))+(((-0.181999999986207)*sj3)))))))+(IKabs(sj3)));
j4eval[1]=((cj3*cj3)+(((-701433.841686249)*cj3*sj3))+(((123002358566.338)*(sj3*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=(cj3+(((-109839.914773322)*sj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((3.14158354943124)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=((17109237.9030292)+(((240468019.165589)*px))+(((-240468019.155632)*j2))+(((-1.0)*py)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-59412212389.4706)+(((835040287626.738)*j2))+(((-5217914.23709947)*py))+(((-5217914.23709947)*j1))+(((-835040287708.849)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((137104.379464338)+(((1927016.04857506)*px))+(((17.535846042033)*j1))+(((-1927016.04833555)*j2))+(((17.535846042033)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-59412212389.4706)+(((835040287626.738)*j2))+(((-5217914.23709947)*py))+(((-5217914.23709947)*j1))+(((-835040287708.849)*px))))+IKsqr(((137104.379464338)+(((1927016.04857506)*px))+(((17.535846042033)*j1))+(((-1927016.04833555)*j2))+(((17.535846042033)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-59412212389.4706)+(((835040287626.738)*j2))+(((-5217914.23709947)*py))+(((-5217914.23709947)*j1))+(((-835040287708.849)*px))), ((137104.379464338)+(((1927016.04857506)*px))+(((17.535846042033)*j1))+(((-1927016.04833555)*j2))+(((17.535846042033)*py))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x68=IKcos(j4);
IkReal x69=IKsin(j4);
evalcond[0]=((0.0711497430313687)+(((-0.999999999958557)*j2))+(((3.82199999984161e-12)*x69))+px+(((1.13726296213853e-6)*x68)));
evalcond[1]=((-0.132141277684557)+(((-4.19999999982594e-7)*x69))+(((-0.18199999999093)*x68))+py+(((9.10415855677118e-6)*j2))+j1);
evalcond[2]=((-0.132141277378869)+(((1.00000000004141)*j1))+(((4.15855714831167e-9)*px))+(((-0.18199999999375)*x68))+(((9.1e-6)*j2))+(((1.00000000004141)*py))+(((-4.2e-7)*x69)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=((-0.0959)+(((0.18199999999375)*sj4))+pz+(((-4.2e-7)*cj4)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-9.10415855687186e-6)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=((16964957.0915358)+(((240468019.165589)*px))+(((-240468019.155632)*j2))+(((-1.0)*py)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((58913114908.5538)+(((5217914.23709947)*py))+(((-835040287626.738)*j2))+(((5217914.23709947)*j1))+(((835040287708.849)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-135954.643519355)+(((-1927016.04857506)*px))+(((-17.535846042033)*j1))+(((-17.535846042033)*py))+(((1927016.04833555)*j2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((58913114908.5538)+(((5217914.23709947)*py))+(((-835040287626.738)*j2))+(((5217914.23709947)*j1))+(((835040287708.849)*px))))+IKsqr(((-135954.643519355)+(((-1927016.04857506)*px))+(((-17.535846042033)*j1))+(((-17.535846042033)*py))+(((1927016.04833555)*j2))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((58913114908.5538)+(((5217914.23709947)*py))+(((-835040287626.738)*j2))+(((5217914.23709947)*j1))+(((835040287708.849)*px))), ((-135954.643519355)+(((-1927016.04857506)*px))+(((-17.535846042033)*j1))+(((-17.535846042033)*py))+(((1927016.04833555)*j2))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x627=IKcos(j4);
IkReal x628=IKsin(j4);
evalcond[0]=((0.0705497445658514)+(((-0.999999999958557)*j2))+(((-3.82199999984161e-12)*x628))+px+(((-1.13726296213853e-6)*x627)));
evalcond[1]=((0.236858722333217)+(((0.18199999999093)*x627))+(((4.19999999982594e-7)*x628))+py+(((9.10415855677118e-6)*j2))+j1);
evalcond[2]=((-0.236858722621131)+(((-9.1e-6)*j2))+(((-1.00000000004141)*j1))+(((-0.18199999999375)*x627))+(((-1.00000000004141)*py))+(((-4.15855714831167e-9)*px))+(((-4.2e-7)*x628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=((-0.0959)+(((0.18199999999375)*sj4))+pz+(((-4.2e-7)*cj4)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x629=((9.10415855677118e-6)*cj3);
IkReal x630=((0.999999999958557)*sj3);
CheckValue<IkReal> x637=IKPowWithIntegerCheck(((((-1.0)*x630))+x629),-1);
if(!x637.valid){
continue;
}
IkReal x631=x637.value;
IkReal x632=(cj3*x631);
IkReal x633=(py*x631);
IkReal x634=((9.10415855677118e-6)*x631);
IkReal x635=(sj3*x631);
IkReal x636=(px*x631);
CheckValue<IkReal> x638=IKPowWithIntegerCheck(((((9.10415855677118e-6)*cj3))+(((-1.0)*x630))),-1);
if(!x638.valid){
continue;
}
CheckValue<IkReal> x639=IKPowWithIntegerCheck(((((-0.999999999958557)*sj3))+x629),-1);
if(!x639.valid){
continue;
}
j1array[0]=(((px*sj3*x634))+(((0.999999999958557)*px*x632))+(((-0.0003)*x631))+(((-1.0)*py*x629*(x638.value)))+((py*x630*(x639.value)))+(((-1.0)*j2*x632))+(((0.0523593673494616)*x635))+(((0.070849267113564)*x632)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x640=(j2*sj3);
IkReal x641=(cj3*j2);
IkReal x642=((835040287756.332)*sj3);
IkReal x643=((2380952.38105105)*cj3);
IkReal x644=((1927016.04873463)*sj3);
IkReal x645=(cj3*px);
if( IKabs(((-249548740.458407)+((j1*x642))+(((59162265785.4291)*cj3))+((py*x642))+(((-1.0)*j1*x643))+(((43721811246.1288)*sj3))+(((2380952.38105105)*px*sj3))+(((-835040287743.402)*x641))+(((5221386.8000731)*x640))+(((835040287756.332)*x645))+(((-1.0)*py*x643)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((574.867972491169)+(((-17.5438596491228)*x640))+(((1927016.04865477)*x641))+(((-1927016.04873463)*x645))+(((-1.0)*j1*x644))+(((-100896.098210225)*sj3))+(((-1.0)*py*x644))+(((-136528.593348659)*cj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-249548740.458407)+((j1*x642))+(((59162265785.4291)*cj3))+((py*x642))+(((-1.0)*j1*x643))+(((43721811246.1288)*sj3))+(((2380952.38105105)*px*sj3))+(((-835040287743.402)*x641))+(((5221386.8000731)*x640))+(((835040287756.332)*x645))+(((-1.0)*py*x643))))+IKsqr(((574.867972491169)+(((-17.5438596491228)*x640))+(((1927016.04865477)*x641))+(((-1927016.04873463)*x645))+(((-1.0)*j1*x644))+(((-100896.098210225)*sj3))+(((-1.0)*py*x644))+(((-136528.593348659)*cj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-249548740.458407)+((j1*x642))+(((59162265785.4291)*cj3))+((py*x642))+(((-1.0)*j1*x643))+(((43721811246.1288)*sj3))+(((2380952.38105105)*px*sj3))+(((-835040287743.402)*x641))+(((5221386.8000731)*x640))+(((835040287756.332)*x645))+(((-1.0)*py*x643))), ((574.867972491169)+(((-17.5438596491228)*x640))+(((1927016.04865477)*x641))+(((-1927016.04873463)*x645))+(((-1.0)*j1*x644))+(((-100896.098210225)*sj3))+(((-1.0)*py*x644))+(((-136528.593348659)*cj3))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x646=IKcos(j4);
IkReal x647=IKsin(j4);
IkReal x648=((0.999999999958557)*cj3);
IkReal x649=((9.10415855677118e-6)*sj3);
IkReal x650=((4.19999999982594e-7)*x647);
IkReal x651=(cj3*x646);
IkReal x652=(sj3*x646);
evalcond[0]=((0.07084974379861)+(((-1.0)*sj3*x650))+(((-0.184500002723601)*sj3))+(((-0.999999999958557)*j2))+px+(((5.18937037735957e-7)*x651))+(((-0.181999999986207)*x652))+(((-0.000298320282733843)*cj3)));
evalcond[1]=((0.0523587223243303)+(((0.181999999986207)*x651))+((cj3*x650))+(((-0.000298320282733843)*sj3))+py+(((9.10415855677118e-6)*j2))+(((5.18937037735957e-7)*x652))+(((0.184500002723601)*cj3))+j1);
evalcond[2]=((-0.1845)+(((0.999999999958557)*px*sj3))+(((-4.2e-7)*x647))+(((-9.10415855677118e-6)*cj3*px))+(((-0.0523593673494616)*cj3))+(((-1.0)*j1*x649))+(((-1.0)*j1*x648))+(((-0.18199999999375)*x646))+(((-1.0)*j2*sj3))+(((-1.0)*py*x649))+(((-1.0)*py*x648))+(((0.070849267113564)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=((-0.0959)+(((0.18199999999375)*sj4))+pz+(((-4.2e-7)*cj4)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x653=((((5.18937037735957e-7)*cj3))+(((-0.181999999986207)*sj3)));
CheckValue<IkReal> x656 = IKatan2WithCheck(IkReal(x653),IkReal(((-4.19999999982594e-7)*sj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x656.valid){
continue;
}
IkReal x654=((1.0)*(x656.value));
if((((((1.76399999985379e-13)*(sj3*sj3)))+(x653*x653))) < -0.00001)
continue;
CheckValue<IkReal> x657=IKPowWithIntegerCheck(IKabs(IKsqrt(((((1.76399999985379e-13)*(sj3*sj3)))+(x653*x653)))),-1);
if(!x657.valid){
continue;
}
if( (((x657.value)*(((0.07084974379861)+(((-0.184500002723601)*sj3))+(((-0.999999999958557)*j2))+px+(((-0.000298320282733843)*cj3)))))) < -1-IKFAST_SINCOS_THRESH || (((x657.value)*(((0.07084974379861)+(((-0.184500002723601)*sj3))+(((-0.999999999958557)*j2))+px+(((-0.000298320282733843)*cj3)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x655=IKasin(((x657.value)*(((0.07084974379861)+(((-0.184500002723601)*sj3))+(((-0.999999999958557)*j2))+px+(((-0.000298320282733843)*cj3))))));
j4array[0]=((((-1.0)*x655))+(((-1.0)*x654)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x654))+x655);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=((-0.0959)+(((0.18199999999375)*sj4))+pz+(((-4.2e-7)*cj4)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=((-0.0523587223243303)+(((-4.19999999982594e-7)*cj3*sj4))+(((-5.18937037735957e-7)*cj4*sj3))+(((-9.10415855677118e-6)*j2))+(((0.000298320282733843)*sj3))+(((-1.0)*py))+(((-0.184500002723601)*cj3))+(((-0.181999999986207)*cj3*cj4)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(solutions);
}
}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x70=((9.9999999995e-6)*cj4);
IkReal x71=((0.99999999995)*sj4);
IkReal x72=((9.10415855677118e-6)*cj3);
IkReal x73=((0.999999999958557)*cj3);
IkReal x74=((0.999999999958557)*sj3);
IkReal x75=((9.10415855677118e-6)*sj3);
IkReal x76=((((-1.0)*x74))+x72);
IkReal x77=((((-1.0)*x70))+x71);
IkReal x78=((((-1.0)*x71))+x70);
IkReal x79=((-0.999999999958557)*sj3);
IkReal x80=((((-1.0)*x73))+(((-1.0)*x75)));
IkReal x81=((((-0.99999999995)*cj4))+(((-9.9999999995e-6)*sj4)));
IkReal x82=((0.999999999958557)*x77);
IkReal x83=(x72*x77);
IkReal x84=(sj3*x81);
IkReal x85=(x72*x81);
IkReal x86=(((x75*x77))+((x73*x77)));
IkReal x87=(x83+((x77*x79)));
IkReal x88=(x85+(((-1.0)*x74*x81)));
IkReal x89=(((x73*x81))+((x75*x81)));
new_r00=(((r10*x76))+((r00*x80)));
new_r01=(((r11*x76))+((r01*x80)));
new_r02=(((r02*x80))+((r12*x76)));
new_r10=(((r00*(((((-1.0)*x74*x77))+x83))))+((r10*x86))+((r20*x81)));
new_r11=(((r21*x81))+((r11*x86))+((r01*x87)));
new_r12=(((r12*x86))+((r22*x81))+((r02*x87)));
new_r20=(((r10*x89))+((r00*x88))+((r20*x78)));
new_r21=(((r21*x78))+((r11*x89))+((r01*((((x79*x81))+x85)))));
new_r22=(((r12*x89))+((r22*x78))+((r02*x88)));
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( (new_r22) < -1-IKFAST_SINCOS_THRESH || (new_r22) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x90=IKasin(new_r22);
j6array[0]=((1.56740480877927)+(((-1.0)*x90)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((4.70899746236906)+x90);
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j5eval[3];
j5eval[0]=(cj6+(((294.852087253321)*sj6)));
j5eval[1]=IKsign(((((0.999994248808288)*sj6))+(((0.00339151151387016)*cj6))));
j5eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
j7eval[0]=((((-294.852087253321)*sj6))+(((-1.0)*cj6)));
j7eval[1]=((IKabs(new_r20))+(IKabs(new_r21)));
j7eval[2]=IKsign(((((-0.999994248808288)*sj6))+(((-0.00339151151387016)*cj6))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[4];
IkReal x91=((new_r12*new_r12)+(new_r02*new_r02));
j5eval[0]=x91;
j5eval[1]=0.999988497649651;
j5eval[2]=sj6;
j5eval[3]=IKsign(x91);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r12*new_r12)+(new_r02*new_r02));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
j5eval[0]=IKabs((cj6+(((294.852087253321)*sj6))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
j5eval[0]=IKabs(((((0.999994248808288)*sj6))+(((0.00339151151387016)*cj6))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5, j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x92=((((0.999994248808288)*sj6))+(((0.00339151151387016)*cj6)));
op[0]=x92;
op[1]=0;
op[2]=((-1.0)*x92);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs((((new_r11*sj5))+((cj5*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*new_r00))+(((-1.0)*new_r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*sj5))+((cj5*new_r01))))+IKsqr(((((-1.0)*cj5*new_r00))+(((-1.0)*new_r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((new_r11*sj5))+((cj5*new_r01))), ((((-1.0)*cj5*new_r00))+(((-1.0)*new_r10*sj5))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x93=IKsin(j7);
IkReal x94=IKcos(j7);
IkReal x95=(sj5*sj6);
IkReal x96=((1.0)*sj5);
IkReal x97=(cj5*sj6);
IkReal x98=((294.853783013954)*sj6);
IkReal x99=((255.849427509567)*sj6);
IkReal x100=((146.559966568864)*sj6);
IkReal x101=((294.853783013954)*x93);
IkReal x102=(cj5*x94);
IkReal x103=(new_r10*x97);
IkReal x104=((1.0)*x93);
evalcond[0]=(((new_r10*sj5))+((cj5*new_r00))+x94);
evalcond[1]=(((new_r11*sj5))+((cj5*new_r01))+(((-1.0)*x104)));
evalcond[2]=(((cj5*new_r10))+(((-1.0)*new_r00*x96))+(((-1.0)*x93*x98)));
evalcond[3]=((((-1.0)*x94*x98))+((cj5*new_r11))+(((-1.0)*new_r01*x96)));
evalcond[4]=(((x101*x95))+x102+new_r00);
evalcond[5]=((((-1.0)*x101*x97))+new_r10+((sj5*x94)));
evalcond[6]=((((-1.0)*cj5*x104))+(((294.853783013954)*x94*x95))+new_r01);
evalcond[7]=((((-294.853783013954)*x94*x97))+new_r11+(((-1.0)*x93*x96)));
evalcond[8]=((((0.867716279215787)*x93))+((new_r20*x100))+(((-255.849427509567)*x103))+(((255.849427509567)*new_r00*x95)));
evalcond[9]=((((255.849427509567)*new_r01*x95))+(((0.867716279215787)*x94))+((new_r21*x100))+(((-255.849427509567)*new_r11*x97)));
evalcond[10]=((((146.559966568864)*x103))+(((-0.497059814090729)*x93))+(((-146.559966568864)*new_r00*x95))+((new_r20*x99)));
evalcond[11]=((((-146.559966568864)*new_r01*x95))+(((146.559966568864)*new_r11*x97))+((new_r21*x99))+(((-0.497059814090729)*x94)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x105=((294.852087253321)*sj6);
op[0]=(cj6+x105);
op[1]=0;
op[2]=((((-1.0)*x105))+(((-1.0)*cj6)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs((((new_r11*sj5))+((cj5*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*new_r00))+(((-1.0)*new_r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*sj5))+((cj5*new_r01))))+IKsqr(((((-1.0)*cj5*new_r00))+(((-1.0)*new_r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((new_r11*sj5))+((cj5*new_r01))), ((((-1.0)*cj5*new_r00))+(((-1.0)*new_r10*sj5))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x106=IKsin(j7);
IkReal x107=IKcos(j7);
IkReal x108=(sj5*sj6);
IkReal x109=((1.0)*sj5);
IkReal x110=(cj5*sj6);
IkReal x111=((294.853783013954)*sj6);
IkReal x112=((255.849427509567)*sj6);
IkReal x113=((146.559966568864)*sj6);
IkReal x114=((294.853783013954)*x106);
IkReal x115=(cj5*x107);
IkReal x116=(new_r10*x110);
IkReal x117=((1.0)*x106);
evalcond[0]=(((new_r10*sj5))+((cj5*new_r00))+x107);
evalcond[1]=(((new_r11*sj5))+((cj5*new_r01))+(((-1.0)*x117)));
evalcond[2]=((((-1.0)*new_r00*x109))+((cj5*new_r10))+(((-1.0)*x106*x111)));
evalcond[3]=(((cj5*new_r11))+(((-1.0)*x107*x111))+(((-1.0)*new_r01*x109)));
evalcond[4]=(x115+((x108*x114))+new_r00);
evalcond[5]=(((sj5*x107))+(((-1.0)*x110*x114))+new_r10);
evalcond[6]=((((294.853783013954)*x107*x108))+(((-1.0)*cj5*x117))+new_r01);
evalcond[7]=((((-1.0)*x106*x109))+(((-294.853783013954)*x107*x110))+new_r11);
evalcond[8]=(((new_r20*x113))+(((-255.849427509567)*x116))+(((255.849427509567)*new_r00*x108))+(((0.867716279215787)*x106)));
evalcond[9]=(((new_r21*x113))+(((255.849427509567)*new_r01*x108))+(((-255.849427509567)*new_r11*x110))+(((0.867716279215787)*x107)));
evalcond[10]=((((-146.559966568864)*new_r00*x108))+((new_r20*x112))+(((146.559966568864)*x116))+(((-0.497059814090729)*x106)));
evalcond[11]=((((-146.559966568864)*new_r01*x108))+(((146.559966568864)*new_r11*x110))+((new_r21*x112))+(((-0.497059814090729)*x107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-294.853783013954)*new_r02)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((294.853783013954)*new_r12)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-294.853783013954)*new_r02))+IKsqr(((294.853783013954)*new_r12))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-294.853783013954)*new_r02), ((294.853783013954)*new_r12));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x118=IKsin(j5);
IkReal x119=IKcos(j5);
IkReal x120=(new_r12*x119);
IkReal x121=(new_r02*x118);
evalcond[0]=((((0.00339151151387016)*x118))+new_r02);
evalcond[1]=((((-0.00339151151387016)*x119))+new_r12);
evalcond[2]=(((new_r02*x119))+((new_r12*x118)));
evalcond[3]=((-0.00339151151387016)+x120+(((-1.0)*x121)));
evalcond[4]=((-0.00293713547059887)+(((-0.866025504730542)*x121))+(((0.866025504730542)*x120)));
evalcond[5]=((0.00169575516395026)+(((-0.499999825156179)*x120))+(((0.499999825156179)*x121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((294.853783013954)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((294.853783013954)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((294.853783013954)*new_r20))+IKsqr(((294.853783013954)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((294.853783013954)*new_r20), ((294.853783013954)*new_r21));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[14];
IkReal x122=IKcos(j7);
IkReal x123=IKsin(j7);
IkReal x124=((0.499999825156179)*sj5);
IkReal x125=(cj5*new_r11);
IkReal x126=((1.0)*sj5);
IkReal x127=((0.866025504730542)*sj5);
IkReal x128=(cj5*new_r10);
IkReal x129=(cj5*x122);
IkReal x130=((0.999994248808288)*x123);
IkReal x131=((0.999994248808288)*x122);
IkReal x132=((1.0)*x123);
evalcond[0]=(((new_r10*sj5))+((cj5*new_r00))+x122);
evalcond[1]=(new_r20+(((-0.00339151151387016)*x123)));
evalcond[2]=(new_r21+(((-0.00339151151387016)*x122)));
evalcond[3]=(((new_r11*sj5))+((cj5*new_r01))+(((-1.0)*x132)));
evalcond[4]=((((-1.0)*new_r00*x126))+x130+x128);
evalcond[5]=((((-1.0)*new_r01*x126))+x131+x125);
evalcond[6]=((((-1.0)*sj5*x130))+x129+new_r00);
evalcond[7]=(((sj5*x122))+new_r10+((cj5*x130)));
evalcond[8]=((((-1.0)*sj5*x131))+(((-1.0)*cj5*x132))+new_r01);
evalcond[9]=((((-1.0)*x123*x126))+(((0.999994248808288)*x129))+new_r11);
evalcond[10]=((((0.867716279215787)*x123))+(((-1.0)*new_r00*x127))+(((-0.499999825156179)*new_r20))+(((0.866025504730542)*x128)));
evalcond[11]=((((0.867716279215787)*x122))+(((-1.0)*new_r01*x127))+(((-0.499999825156179)*new_r21))+(((0.866025504730542)*x125)));
evalcond[12]=(((new_r00*x124))+(((-0.497059814090729)*x123))+(((-0.499999825156179)*x128))+(((-0.866025504730542)*new_r20)));
evalcond[13]=(((new_r01*x124))+(((-0.497059814090729)*x122))+(((-0.499999825156179)*x125))+(((-0.866025504730542)*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((294.853783013954)*new_r02)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-294.853783013954)*new_r12)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((294.853783013954)*new_r02))+IKsqr(((-294.853783013954)*new_r12))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((294.853783013954)*new_r02), ((-294.853783013954)*new_r12));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x133=IKsin(j5);
IkReal x134=IKcos(j5);
IkReal x135=(new_r12*x134);
IkReal x136=(new_r02*x133);
evalcond[0]=((((-0.00339151151387016)*x133))+new_r02);
evalcond[1]=((((0.00339151151387016)*x134))+new_r12);
evalcond[2]=(((new_r12*x133))+((new_r02*x134)));
evalcond[3]=((0.00339151151387016)+x135+(((-1.0)*x136)));
evalcond[4]=((-0.00293713547059887)+(((-0.866025504730542)*x135))+(((0.866025504730542)*x136)));
evalcond[5]=((0.00169575516395026)+(((-0.499999825156179)*x136))+(((0.499999825156179)*x135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-294.853783013954)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-294.853783013954)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-294.853783013954)*new_r20))+IKsqr(((-294.853783013954)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-294.853783013954)*new_r20), ((-294.853783013954)*new_r21));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[14];
IkReal x137=IKcos(j7);
IkReal x138=IKsin(j7);
IkReal x139=((0.499999825156179)*sj5);
IkReal x140=(cj5*new_r11);
IkReal x141=((1.0)*sj5);
IkReal x142=((0.866025504730542)*sj5);
IkReal x143=(cj5*new_r10);
IkReal x144=(cj5*x137);
IkReal x145=((0.999994248808288)*x138);
IkReal x146=((0.999994248808288)*x137);
IkReal x147=((1.0)*x138);
evalcond[0]=(((new_r10*sj5))+((cj5*new_r00))+x137);
evalcond[1]=((((0.00339151151387016)*x138))+new_r20);
evalcond[2]=((((0.00339151151387016)*x137))+new_r21);
evalcond[3]=((((-1.0)*x147))+((new_r11*sj5))+((cj5*new_r01)));
evalcond[4]=((((-1.0)*x145))+x143+(((-1.0)*new_r00*x141)));
evalcond[5]=((((-1.0)*new_r01*x141))+(((-1.0)*x146))+x140);
evalcond[6]=(x144+new_r00+((sj5*x145)));
evalcond[7]=(((sj5*x137))+new_r10+(((-1.0)*cj5*x145)));
evalcond[8]=(new_r01+(((-1.0)*cj5*x147))+((sj5*x146)));
evalcond[9]=((((-1.0)*x138*x141))+new_r11+(((-0.999994248808288)*x144)));
evalcond[10]=((((0.867716279215787)*x138))+((new_r00*x142))+(((0.499999825156179)*new_r20))+(((-0.866025504730542)*x143)));
evalcond[11]=((((0.867716279215787)*x137))+((new_r01*x142))+(((0.499999825156179)*new_r21))+(((-0.866025504730542)*x140)));
evalcond[12]=((((0.866025504730542)*new_r20))+(((0.499999825156179)*x143))+(((-1.0)*new_r00*x139))+(((-0.497059814090729)*x138)));
evalcond[13]=((((-1.0)*new_r01*x139))+(((0.866025504730542)*new_r21))+(((0.499999825156179)*x140))+(((-0.497059814090729)*x137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.13820113557416)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((658754891.940079)*new_r02)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-658754891.940079)*new_r12)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((658754891.940079)*new_r02))+IKsqr(((-658754891.940079)*new_r12))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((658754891.940079)*new_r02), ((-658754891.940079)*new_r12));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x148=IKsin(j5);
IkReal x149=IKcos(j5);
IkReal x150=(new_r12*x149);
IkReal x151=(new_r02*x148);
evalcond[0]=(new_r02+(((-1.51801529253913e-9)*x148)));
evalcond[1]=((((1.51801529253913e-9)*x149))+new_r12);
evalcond[2]=(((new_r12*x148))+((new_r02*x149)));
evalcond[3]=((1.51801529253913e-9)+x150+(((-1.0)*x151)));
evalcond[4]=((-2.52966814162647e-9)+(((-0.867716279519538)*x150))+(((0.867716279519538)*x151)));
evalcond[5]=((-1.36204714401653e-9)+(((-0.497059816014166)*x151))+(((0.497059816014166)*x150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-658754891.940079)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-658754891.940079)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-658754891.940079)*new_r20))+IKsqr(((-658754891.940079)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-658754891.940079)*new_r20), ((-658754891.940079)*new_r21));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[14];
IkReal x152=IKcos(j7);
IkReal x153=IKsin(j7);
IkReal x154=((1.00000000121963)*sj5);
IkReal x155=((1.0)*sj5);
IkReal x156=(cj5*new_r10);
IkReal x157=(cj5*new_r11);
IkReal x158=((0.497059816014166)*sj5);
IkReal x159=((0.867716279519538)*sj5);
IkReal x160=(cj5*x152);
IkReal x161=((1.00000000121963)*x153);
IkReal x162=((1.0)*x153);
evalcond[0]=(((new_r10*sj5))+((cj5*new_r00))+x152);
evalcond[1]=(new_r20+(((1.51801529253913e-9)*x153)));
evalcond[2]=(new_r21+(((1.51801529253913e-9)*x152)));
evalcond[3]=((((-1.0)*x162))+((new_r11*sj5))+((cj5*new_r01)));
evalcond[4]=((((-1.0)*x161))+x156+(((-1.0)*new_r00*x155)));
evalcond[5]=((((-1.00000000121963)*x152))+x157+(((-1.0)*new_r01*x155)));
evalcond[6]=(((x153*x154))+x160+new_r00);
evalcond[7]=(((sj5*x152))+(((-1.0)*cj5*x161))+new_r10);
evalcond[8]=((((-1.0)*cj5*x162))+((x152*x154))+new_r01);
evalcond[9]=((((-1.0)*x153*x155))+(((-1.00000000121963)*x160))+new_r11);
evalcond[10]=(((new_r00*x159))+(((0.867716279215787)*x153))+(((-0.867716279519538)*x156))+(((0.497059816014166)*new_r20)));
evalcond[11]=(((new_r01*x159))+(((0.867716279215787)*x152))+(((-0.867716279519538)*x157))+(((0.497059816014166)*new_r21)));
evalcond[12]=((((0.867716279519538)*new_r20))+(((-0.497059814090729)*x153))+(((-1.0)*new_r00*x158))+(((0.497059816014166)*x156)));
evalcond[13]=((((0.867716279519538)*new_r21))+(((-0.497059814090729)*x152))+(((-1.0)*new_r01*x158))+(((0.497059816014166)*x157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-6.27979378916396)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-658754891.940079)*new_r02)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((658754891.940079)*new_r12)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-658754891.940079)*new_r02))+IKsqr(((658754891.940079)*new_r12))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-658754891.940079)*new_r02), ((658754891.940079)*new_r12));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x163=IKsin(j5);
IkReal x164=IKcos(j5);
IkReal x165=(new_r12*x164);
IkReal x166=(new_r02*x163);
evalcond[0]=((((1.51801529253913e-9)*x163))+new_r02);
evalcond[1]=((((-1.51801529253913e-9)*x164))+new_r12);
evalcond[2]=(((new_r12*x163))+((new_r02*x164)));
evalcond[3]=((-1.51801529253913e-9)+x165+(((-1.0)*x166)));
evalcond[4]=((-2.52966814162647e-9)+(((0.867716279519538)*x165))+(((-0.867716279519538)*x166)));
evalcond[5]=((-1.36204714401653e-9)+(((0.497059816014166)*x166))+(((-0.497059816014166)*x165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((658754891.940079)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((658754891.940079)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((658754891.940079)*new_r20))+IKsqr(((658754891.940079)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((658754891.940079)*new_r20), ((658754891.940079)*new_r21));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[14];
IkReal x167=IKcos(j7);
IkReal x168=IKsin(j7);
IkReal x169=((1.00000000121963)*sj5);
IkReal x170=((1.0)*sj5);
IkReal x171=(cj5*new_r10);
IkReal x172=(cj5*new_r11);
IkReal x173=((0.497059816014166)*sj5);
IkReal x174=((0.867716279519538)*sj5);
IkReal x175=(cj5*x167);
IkReal x176=((1.00000000121963)*x168);
IkReal x177=((1.0)*x168);
evalcond[0]=(((new_r10*sj5))+((cj5*new_r00))+x167);
evalcond[1]=((((-1.51801529253913e-9)*x168))+new_r20);
evalcond[2]=((((-1.51801529253913e-9)*x167))+new_r21);
evalcond[3]=((((-1.0)*x177))+((new_r11*sj5))+((cj5*new_r01)));
evalcond[4]=(x171+x176+(((-1.0)*new_r00*x170)));
evalcond[5]=(x172+(((-1.0)*new_r01*x170))+(((1.00000000121963)*x167)));
evalcond[6]=(x175+(((-1.0)*x168*x169))+new_r00);
evalcond[7]=(((cj5*x176))+new_r10+((sj5*x167)));
evalcond[8]=((((-1.0)*cj5*x177))+new_r01+(((-1.0)*x167*x169)));
evalcond[9]=((((-1.0)*x168*x170))+new_r11+(((1.00000000121963)*x175)));
evalcond[10]=((((-0.497059816014166)*new_r20))+(((0.867716279519538)*x171))+(((0.867716279215787)*x168))+(((-1.0)*new_r00*x174)));
evalcond[11]=((((-0.497059816014166)*new_r21))+(((0.867716279519538)*x172))+(((0.867716279215787)*x167))+(((-1.0)*new_r01*x174)));
evalcond[12]=(((new_r00*x173))+(((-0.497059814090729)*x168))+(((-0.867716279519538)*new_r20))+(((-0.497059816014166)*x171)));
evalcond[13]=(((new_r01*x173))+(((-0.497059814090729)*x167))+(((-0.867716279519538)*new_r21))+(((-0.497059816014166)*x172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.00339151801562942)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-658754891.940079)*new_r02)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((658754891.940079)*new_r12)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-658754891.940079)*new_r02))+IKsqr(((658754891.940079)*new_r12))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-658754891.940079)*new_r02), ((658754891.940079)*new_r12));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x178=IKsin(j5);
IkReal x179=IKcos(j5);
IkReal x180=(new_r12*x179);
IkReal x181=(new_r02*x178);
evalcond[0]=((((1.51801529253913e-9)*x178))+new_r02);
evalcond[1]=((((-1.51801529253913e-9)*x179))+new_r12);
evalcond[2]=(((new_r02*x179))+((new_r12*x178)));
evalcond[3]=((-1.51801529253913e-9)+(((-1.0)*x181))+x180);
evalcond[4]=((-2.52966814162647e-9)+(((-0.867716279519538)*x181))+(((0.867716279519538)*x180)));
evalcond[5]=((-1.36204714401653e-9)+(((0.497059816014166)*x181))+(((-0.497059816014166)*x180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((658754891.940079)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((658754891.940079)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((658754891.940079)*new_r20))+IKsqr(((658754891.940079)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((658754891.940079)*new_r20), ((658754891.940079)*new_r21));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[14];
IkReal x182=IKcos(j7);
IkReal x183=IKsin(j7);
IkReal x184=((1.00000000121963)*sj5);
IkReal x185=((1.0)*sj5);
IkReal x186=(cj5*new_r10);
IkReal x187=(cj5*new_r11);
IkReal x188=((0.497059816014166)*sj5);
IkReal x189=((0.867716279519538)*sj5);
IkReal x190=(cj5*x182);
IkReal x191=((1.00000000121963)*x183);
IkReal x192=((1.0)*x183);
evalcond[0]=(((new_r10*sj5))+((cj5*new_r00))+x182);
evalcond[1]=(new_r20+(((-1.51801529253913e-9)*x183)));
evalcond[2]=(new_r21+(((-1.51801529253913e-9)*x182)));
evalcond[3]=(((new_r11*sj5))+((cj5*new_r01))+(((-1.0)*x192)));
evalcond[4]=(x191+x186+(((-1.0)*new_r00*x185)));
evalcond[5]=(x187+(((-1.0)*new_r01*x185))+(((1.00000000121963)*x182)));
evalcond[6]=(x190+new_r00+(((-1.0)*x183*x184)));
evalcond[7]=(((cj5*x191))+new_r10+((sj5*x182)));
evalcond[8]=((((-1.0)*cj5*x192))+new_r01+(((-1.0)*x182*x184)));
evalcond[9]=((((1.00000000121963)*x190))+new_r11+(((-1.0)*x183*x185)));
evalcond[10]=((((-0.497059816014166)*new_r20))+(((0.867716279519538)*x186))+(((0.867716279215787)*x183))+(((-1.0)*new_r00*x189)));
evalcond[11]=((((-0.497059816014166)*new_r21))+(((0.867716279519538)*x187))+(((-1.0)*new_r01*x189))+(((0.867716279215787)*x182)));
evalcond[12]=(((new_r00*x188))+(((-0.497059814090729)*x183))+(((-0.867716279519538)*new_r20))+(((-0.497059816014166)*x186)));
evalcond[13]=(((new_r01*x188))+(((-0.497059814090729)*x182))+(((-0.867716279519538)*new_r21))+(((-0.497059816014166)*x187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=IKabs((cj6+(((294.852087253321)*sj6))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=IKabs(((((0.999994248808288)*sj6))+(((0.00339151151387016)*cj6))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5, j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x193=((((0.999994248808288)*sj6))+(((0.00339151151387016)*cj6)));
op[0]=x193;
op[1]=0;
op[2]=((-1.0)*x193);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs((((new_r11*sj5))+((cj5*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*new_r00))+(((-1.0)*new_r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*sj5))+((cj5*new_r01))))+IKsqr(((((-1.0)*cj5*new_r00))+(((-1.0)*new_r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((new_r11*sj5))+((cj5*new_r01))), ((((-1.0)*cj5*new_r00))+(((-1.0)*new_r10*sj5))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[14];
IkReal x194=IKsin(j7);
IkReal x195=IKcos(j7);
IkReal x196=(sj5*sj6);
IkReal x197=((1.0)*sj5);
IkReal x198=((0.00339151151387016)*cj6);
IkReal x199=(cj5*sj6);
IkReal x200=((0.999994248808288)*sj6);
IkReal x201=((294.853783013954)*sj6);
IkReal x202=((294.853783013954)*x194);
IkReal x203=(cj5*x195);
IkReal x204=(new_r10*x199);
IkReal x205=((1.0)*x194);
evalcond[0]=(((new_r10*sj5))+((cj5*new_r00))+x195);
evalcond[1]=(((new_r11*sj5))+((cj5*new_r01))+(((-1.0)*x205)));
evalcond[2]=((((-1.0)*x194*x201))+((cj5*new_r10))+(((-1.0)*new_r00*x197)));
evalcond[3]=((((-1.0)*x195*x201))+((cj5*new_r11))+(((-1.0)*new_r01*x197)));
evalcond[4]=(((x196*x202))+x203+new_r00);
evalcond[5]=((((-1.0)*x199*x202))+new_r10+((sj5*x195)));
evalcond[6]=((((-1.0)*cj5*x205))+(((294.853783013954)*x195*x196))+new_r01);
evalcond[7]=((((-1.0)*x194*x197))+new_r11+(((-294.853783013954)*x195*x199)));
evalcond[8]=((((-1.0)*x194*x200))+(((-1.0)*x194*x198)));
evalcond[9]=((((-1.0)*x195*x200))+(((-1.0)*x195*x198)));
evalcond[10]=((((-255.849427509567)*x204))+(((0.867716279215787)*x194))+(((255.849427509567)*new_r00*x196)));
evalcond[11]=((((255.849427509567)*new_r01*x196))+(((-255.849427509567)*new_r11*x199))+(((0.867716279215787)*x195)));
evalcond[12]=((((-146.559966568864)*new_r00*x196))+(((-0.497059814090729)*x194))+(((146.559966568864)*x204)));
evalcond[13]=((((-0.497059814090729)*x195))+(((146.559966568864)*new_r11*x199))+(((-146.559966568864)*new_r01*x196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x206=((294.852087253321)*sj6);
op[0]=(cj6+x206);
op[1]=0;
op[2]=((((-1.0)*x206))+(((-1.0)*cj6)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs((((new_r11*sj5))+((cj5*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*new_r00))+(((-1.0)*new_r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*sj5))+((cj5*new_r01))))+IKsqr(((((-1.0)*cj5*new_r00))+(((-1.0)*new_r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((new_r11*sj5))+((cj5*new_r01))), ((((-1.0)*cj5*new_r00))+(((-1.0)*new_r10*sj5))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[14];
IkReal x207=IKsin(j7);
IkReal x208=IKcos(j7);
IkReal x209=(sj5*sj6);
IkReal x210=((1.0)*sj5);
IkReal x211=((0.00339151151387016)*cj6);
IkReal x212=(cj5*sj6);
IkReal x213=((0.999994248808288)*sj6);
IkReal x214=((294.853783013954)*sj6);
IkReal x215=((294.853783013954)*x207);
IkReal x216=(cj5*x208);
IkReal x217=(new_r10*x212);
IkReal x218=((1.0)*x207);
evalcond[0]=(((new_r10*sj5))+((cj5*new_r00))+x208);
evalcond[1]=(((new_r11*sj5))+((cj5*new_r01))+(((-1.0)*x218)));
evalcond[2]=(((cj5*new_r10))+(((-1.0)*x207*x214))+(((-1.0)*new_r00*x210)));
evalcond[3]=(((cj5*new_r11))+(((-1.0)*new_r01*x210))+(((-1.0)*x208*x214)));
evalcond[4]=(((x209*x215))+x216+new_r00);
evalcond[5]=(new_r10+(((-1.0)*x212*x215))+((sj5*x208)));
evalcond[6]=((((294.853783013954)*x208*x209))+(((-1.0)*cj5*x218))+new_r01);
evalcond[7]=((((-1.0)*x207*x210))+(((-294.853783013954)*x208*x212))+new_r11);
evalcond[8]=((((-1.0)*x207*x213))+(((-1.0)*x207*x211)));
evalcond[9]=((((-1.0)*x208*x213))+(((-1.0)*x208*x211)));
evalcond[10]=((((0.867716279215787)*x207))+(((255.849427509567)*new_r00*x209))+(((-255.849427509567)*x217)));
evalcond[11]=((((0.867716279215787)*x208))+(((255.849427509567)*new_r01*x209))+(((-255.849427509567)*new_r11*x212)));
evalcond[12]=((((-146.559966568864)*new_r00*x209))+(((146.559966568864)*x217))+(((-0.497059814090729)*x207)));
evalcond[13]=((((146.559966568864)*new_r11*x212))+(((-0.497059814090729)*x208))+(((-146.559966568864)*new_r01*x209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5, j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x219=((0.999994248808288)*sj6);
IkReal x220=((0.00339151151387016)*cj6);
CheckValue<IkReal> x221=IKPowWithIntegerCheck(IKsign(((new_r12*new_r12)+(new_r02*new_r02))),-1);
if(!x221.valid){
continue;
}
CheckValue<IkReal> x222 = IKatan2WithCheck(IkReal(((((-1.0)*new_r02*x219))+(((-1.0)*new_r02*x220)))),IkReal((((new_r12*x220))+((new_r12*x219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x222.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x221.value)))+(x222.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x223=IKsin(j5);
IkReal x224=IKcos(j5);
IkReal x225=((0.866025504730542)*cj6);
IkReal x226=((0.00339151151387016)*cj6);
IkReal x227=((0.499999825156179)*sj6);
IkReal x228=((0.499999825156179)*cj6);
IkReal x229=((0.999994248808288)*sj6);
IkReal x230=((0.866025504730542)*sj6);
IkReal x231=(new_r02*x223);
IkReal x232=(new_r12*x224);
IkReal x233=(sj6*x232);
evalcond[0]=(((new_r02*x224))+((new_r12*x223)));
evalcond[1]=(((x223*x226))+((x223*x229))+new_r02);
evalcond[2]=((((-1.0)*x224*x229))+(((-1.0)*x224*x226))+new_r12);
evalcond[3]=(x232+(((-1.0)*x231))+(((-1.0)*x229))+(((-1.0)*x226)));
evalcond[4]=((0.497059814090729)+(((-1.0)*x225*x231))+(((-1.0)*new_r22*x230))+(((-1.0)*x227*x232))+((x225*x232))+((x227*x231))+(((-1.0)*new_r22*x228)));
evalcond[5]=((0.867716279215787)+(((-1.0)*x230*x232))+((x228*x231))+((x230*x231))+((new_r22*x227))+(((-1.0)*new_r22*x225))+(((-1.0)*x228*x232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs((((new_r11*sj5))+((cj5*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*new_r00))+(((-1.0)*new_r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*sj5))+((cj5*new_r01))))+IKsqr(((((-1.0)*cj5*new_r00))+(((-1.0)*new_r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((new_r11*sj5))+((cj5*new_r01))), ((((-1.0)*cj5*new_r00))+(((-1.0)*new_r10*sj5))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[14];
IkReal x234=IKsin(j7);
IkReal x235=IKcos(j7);
IkReal x236=((0.00339151151387016)*sj6);
IkReal x237=((0.866025504730542)*cj6);
IkReal x238=(cj5*new_r10);
IkReal x239=((0.866025504730542)*sj6);
IkReal x240=(new_r01*sj5);
IkReal x241=((0.499999825156179)*cj6);
IkReal x242=((0.999994248808288)*cj6);
IkReal x243=(new_r00*sj5);
IkReal x244=((0.499999825156179)*sj6);
IkReal x245=((0.999994248808288)*sj6);
IkReal x246=(cj5*new_r11);
IkReal x247=(sj5*x235);
IkReal x248=(cj5*x235);
IkReal x249=((0.499999825156179)*x246);
IkReal x250=(cj6*x234);
IkReal x251=(cj6*x235);
IkReal x252=(cj5*x234);
IkReal x253=(sj5*x234);
evalcond[0]=(((new_r10*sj5))+((cj5*new_r00))+x235);
evalcond[1]=(((new_r11*sj5))+((cj5*new_r01))+(((-1.0)*x234)));
evalcond[2]=((((-1.0)*x234*x245))+new_r20+(((-0.00339151151387016)*x250)));
evalcond[3]=((((-1.0)*x235*x245))+new_r21+(((-0.00339151151387016)*x251)));
evalcond[4]=((((-1.0)*x243))+((x234*x242))+x238+(((-1.0)*x234*x236)));
evalcond[5]=((((-1.0)*x240))+(((-1.0)*x235*x236))+x246+((x235*x242)));
evalcond[6]=((((-1.0)*x242*x253))+x248+((x236*x253))+new_r00);
evalcond[7]=(((x242*x252))+x247+(((-1.0)*x236*x252))+new_r10);
evalcond[8]=((((-1.0)*x242*x247))+((x236*x247))+new_r01+(((-1.0)*x252)));
evalcond[9]=((((-1.0)*x236*x248))+((x242*x248))+new_r11+(((-1.0)*x253)));
evalcond[10]=(((x237*x238))+(((-1.0)*new_r20*x239))+(((-1.0)*x237*x243))+(((-1.0)*new_r20*x241))+(((-1.0)*x238*x244))+((x243*x244))+(((0.867716279215787)*x234)));
evalcond[11]=(((x240*x244))+(((-1.0)*new_r21*x239))+((x237*x246))+(((-1.0)*x237*x240))+(((-1.0)*new_r21*x241))+(((-1.0)*x244*x246))+(((0.867716279215787)*x235)));
evalcond[12]=((((-1.0)*new_r20*x237))+(((-1.0)*x238*x239))+((x239*x243))+((x241*x243))+(((-1.0)*x238*x241))+((new_r20*x244))+(((-0.497059814090729)*x234)));
evalcond[13]=(((new_r21*x244))+((x240*x241))+(((-1.0)*new_r21*x237))+((x239*x240))+(((-1.0)*x241*x246))+(((-1.0)*x239*x246))+(((-0.497059814090729)*x235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x254 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x254.valid){
continue;
}
CheckValue<IkReal> x255=IKPowWithIntegerCheck(IKsign(((((-0.999994248808288)*sj6))+(((-0.00339151151387016)*cj6)))),-1);
if(!x255.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x254.value)+(((1.5707963267949)*(x255.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x256=IKsin(j7);
IkReal x257=IKcos(j7);
IkReal x258=((0.00339151151387016)*cj6);
IkReal x259=((0.999994248808288)*sj6);
evalcond[0]=((((-1.0)*x256*x259))+(((-1.0)*x256*x258))+new_r20);
evalcond[1]=((((-1.0)*x257*x259))+(((-1.0)*x257*x258))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
IkReal x260=(((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)));
j5eval[0]=x260;
j5eval[1]=((IKabs((cj7*new_r12)))+(IKabs((cj7*new_r02))));
j5eval[2]=IKsign(x260);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x261=((((-1.0)*new_r01*new_r12))+((new_r02*new_r11)));
j5eval[0]=x261;
j5eval[1]=IKsign(x261);
j5eval[2]=((IKabs((new_r12*sj7)))+(IKabs((new_r02*sj7))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
j5eval[0]=(cj6+(((294.852087253321)*sj6)));
j5eval[1]=IKsign(((((0.999994248808288)*sj6))+(((0.00339151151387016)*cj6))));
j5eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.00339151801562942)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-658754891.940079)*new_r02)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((658754891.940079)*new_r12)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-658754891.940079)*new_r02))+IKsqr(((658754891.940079)*new_r12))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-658754891.940079)*new_r02), ((658754891.940079)*new_r12));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x262=IKsin(j5);
IkReal x263=IKcos(j5);
IkReal x264=((1.0)*sj7);
IkReal x265=((1.00000000121963)*cj7);
IkReal x266=((658754892.743518)*new_r20);
IkReal x267=(new_r11*x263);
IkReal x268=((1.0)*x262);
IkReal x269=(new_r02*x262);
IkReal x270=(new_r12*x263);
IkReal x271=(new_r01*x262);
IkReal x272=(new_r10*x263);
IkReal x273=(new_r00*x262);
evalcond[0]=((((1.51801529253913e-9)*x262))+new_r02);
evalcond[1]=((((-1.51801529253913e-9)*x263))+new_r12);
evalcond[2]=(((new_r12*x262))+((new_r02*x263)));
evalcond[3]=(cj7+((new_r00*x263))+((new_r10*x262)));
evalcond[4]=((((-1.0)*x262*x266))+((cj7*x263))+new_r00);
evalcond[5]=(((cj7*x262))+((x263*x266))+new_r10);
evalcond[6]=(((new_r01*x263))+(((-1.0)*x264))+((new_r11*x262)));
evalcond[7]=((((-1.0)*new_r00*x268))+x266+x272);
evalcond[8]=((-1.51801529253913e-9)+x270+(((-1.0)*new_r02*x268)));
evalcond[9]=((((-1.0)*x262*x265))+(((-1.0)*x263*x264))+new_r01);
evalcond[10]=((((-1.0)*x262*x264))+((x263*x265))+new_r11);
evalcond[11]=((((-1.0)*new_r01*x268))+x265+x267);
evalcond[12]=((-2.52966814162647e-9)+(((0.867716279519538)*x270))+(((-0.867716279519538)*x269)));
evalcond[13]=((-1.36204714401653e-9)+(((-0.497059816014166)*x270))+(((0.497059816014166)*x269)));
evalcond[14]=((((0.867716279519538)*x272))+(((571612343.252383)*new_r20))+(((-0.867716279519538)*x273)));
evalcond[15]=((((-0.497059816014166)*new_r21))+(((0.867716279519538)*x267))+(((-0.867716279519538)*x271))+(((0.867716279215787)*cj7)));
evalcond[16]=((((-0.497059816014166)*x272))+(((0.497059816014166)*x273))+(((-327440584.98681)*new_r20)));
evalcond[17]=((((0.497059816014166)*x271))+(((-0.497059816014166)*x267))+(((-0.497059814090729)*cj7))+(((-0.867716279519538)*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.13820113557416)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((658754891.940079)*new_r02)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-658754891.940079)*new_r12)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((658754891.940079)*new_r02))+IKsqr(((-658754891.940079)*new_r12))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((658754891.940079)*new_r02), ((-658754891.940079)*new_r12));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x274=IKsin(j5);
IkReal x275=IKcos(j5);
IkReal x276=((1.0)*sj7);
IkReal x277=((1.00000000121963)*cj7);
IkReal x278=((658754892.743518)*new_r20);
IkReal x279=(new_r11*x275);
IkReal x280=((1.0)*x274);
IkReal x281=(new_r02*x274);
IkReal x282=(new_r12*x275);
IkReal x283=(new_r01*x274);
IkReal x284=(new_r10*x275);
IkReal x285=(new_r00*x274);
evalcond[0]=((((-1.51801529253913e-9)*x274))+new_r02);
evalcond[1]=((((1.51801529253913e-9)*x275))+new_r12);
evalcond[2]=(((new_r02*x275))+((new_r12*x274)));
evalcond[3]=(cj7+((new_r00*x275))+((new_r10*x274)));
evalcond[4]=((((-1.0)*x274*x278))+((cj7*x275))+new_r00);
evalcond[5]=(((x275*x278))+((cj7*x274))+new_r10);
evalcond[6]=(((new_r01*x275))+(((-1.0)*x276))+((new_r11*x274)));
evalcond[7]=((((-1.0)*new_r00*x280))+x278+x284);
evalcond[8]=((1.51801529253913e-9)+(((-1.0)*new_r02*x280))+x282);
evalcond[9]=(((x274*x277))+(((-1.0)*x275*x276))+new_r01);
evalcond[10]=((((-1.0)*x274*x276))+(((-1.0)*x275*x277))+new_r11);
evalcond[11]=(x279+(((-1.0)*new_r01*x280))+(((-1.0)*x277)));
evalcond[12]=((-2.52966814162647e-9)+(((0.867716279519538)*x281))+(((-0.867716279519538)*x282)));
evalcond[13]=((-1.36204714401653e-9)+(((0.497059816014166)*x282))+(((-0.497059816014166)*x281)));
evalcond[14]=((((-571612343.252383)*new_r20))+(((0.867716279519538)*x285))+(((-0.867716279519538)*x284)));
evalcond[15]=((((0.867716279519538)*x283))+(((-0.867716279519538)*x279))+(((0.867716279215787)*cj7))+(((0.497059816014166)*new_r21)));
evalcond[16]=((((0.497059816014166)*x284))+(((-0.497059816014166)*x285))+(((327440584.98681)*new_r20)));
evalcond[17]=((((0.867716279519538)*new_r21))+(((0.497059816014166)*x279))+(((-0.497059814090729)*cj7))+(((-0.497059816014166)*x283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x286=IKsin(j5);
IkReal x287=IKcos(j5);
IkReal x288=((0.866025504730542)*sj6);
IkReal x289=((0.499999825156179)*cj6);
IkReal x290=((0.866025504730542)*cj6);
IkReal x291=((0.00339151151387016)*cj6);
IkReal x292=((0.499999825156179)*sj6);
IkReal x293=((0.999994248808288)*cj6);
IkReal x294=((0.00339151151387016)*sj6);
IkReal x295=((0.999994248808288)*sj6);
IkReal x296=(new_r12*x287);
IkReal x297=(new_r10*x287);
IkReal x298=(new_r00*x286);
IkReal x299=(sj6*x286);
IkReal x300=(new_r11*x287);
IkReal x301=(new_r02*x286);
IkReal x302=(new_r01*x286);
evalcond[0]=(x287+new_r00);
evalcond[1]=(x286+new_r10);
evalcond[2]=(((new_r02*x287))+((new_r12*x286)));
evalcond[3]=(((new_r11*x286))+((new_r01*x287)));
evalcond[4]=((1.0)+((new_r00*x287))+((new_r10*x286)));
evalcond[5]=((((-1.0)*x298))+x297);
evalcond[6]=(((x286*x295))+((x286*x291))+new_r02);
evalcond[7]=((((-1.0)*x287*x295))+(((-1.0)*x287*x291))+new_r12);
evalcond[8]=((((-1.0)*x286*x293))+((x286*x294))+new_r01);
evalcond[9]=(((x287*x293))+(((-1.0)*x287*x294))+new_r11);
evalcond[10]=((((-1.0)*x295))+(((-1.0)*x291))+(((-1.0)*x301))+x296);
evalcond[11]=((((-1.0)*x294))+(((-1.0)*x302))+x300+x293);
evalcond[12]=(((x290*x297))+(((-1.0)*x290*x298))+((x292*x298))+(((-1.0)*x292*x297)));
evalcond[13]=(((x289*x298))+(((-1.0)*x289*x297))+(((-1.0)*x288*x297))+((x288*x298)));
evalcond[14]=((0.497059814090729)+((x290*x296))+(((-1.0)*new_r22*x289))+(((-1.0)*new_r22*x288))+((x292*x301))+(((-1.0)*x290*x301))+(((-1.0)*x292*x296)));
evalcond[15]=((0.867716279215787)+(((-1.0)*x289*x296))+((new_r22*x292))+((x288*x301))+((x289*x301))+(((-1.0)*x288*x296))+(((-1.0)*new_r22*x290)));
evalcond[16]=((0.867716279215787)+(((-1.0)*x292*x300))+((x290*x300))+((x292*x302))+(((-1.0)*new_r21*x288))+(((-1.0)*new_r21*x289))+(((-1.0)*x290*x302)));
evalcond[17]=((-0.497059814090729)+(((-1.0)*new_r21*x290))+(((-1.0)*x288*x300))+((new_r21*x292))+((x288*x302))+((x289*x302))+(((-1.0)*x289*x300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r00);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x303=IKsin(j5);
IkReal x304=IKcos(j5);
IkReal x305=((0.866025504730542)*sj6);
IkReal x306=((0.499999825156179)*cj6);
IkReal x307=((0.866025504730542)*cj6);
IkReal x308=((0.00339151151387016)*cj6);
IkReal x309=((0.499999825156179)*sj6);
IkReal x310=((0.999994248808288)*cj6);
IkReal x311=((0.00339151151387016)*sj6);
IkReal x312=((0.999994248808288)*sj6);
IkReal x313=(new_r12*x304);
IkReal x314=(new_r10*x304);
IkReal x315=(new_r00*x303);
IkReal x316=(sj6*x303);
IkReal x317=(new_r11*x304);
IkReal x318=(new_r02*x303);
IkReal x319=((1.0)*x303);
IkReal x320=(new_r01*x303);
evalcond[0]=((((-1.0)*x304))+new_r00);
evalcond[1]=((((-1.0)*x319))+new_r10);
evalcond[2]=(((new_r12*x303))+((new_r02*x304)));
evalcond[3]=(((new_r01*x304))+((new_r11*x303)));
evalcond[4]=((-1.0)+((new_r00*x304))+((new_r10*x303)));
evalcond[5]=(x314+(((-1.0)*x315)));
evalcond[6]=(((x303*x308))+new_r02+((x303*x312)));
evalcond[7]=((((-1.0)*x304*x312))+(((-1.0)*x304*x308))+new_r12);
evalcond[8]=((((-1.0)*x303*x311))+new_r01+((x303*x310)));
evalcond[9]=(((x304*x311))+(((-1.0)*x304*x310))+new_r11);
evalcond[10]=(x313+(((-1.0)*x312))+(((-1.0)*x318))+(((-1.0)*x308)));
evalcond[11]=(x317+x311+(((-1.0)*x310))+(((-1.0)*new_r01*x319)));
evalcond[12]=(((x309*x315))+((x307*x314))+(((-1.0)*x307*x315))+(((-1.0)*x309*x314)));
evalcond[13]=(((x305*x315))+(((-1.0)*x306*x314))+(((-1.0)*x305*x314))+((x306*x315)));
evalcond[14]=((0.497059814090729)+(((-1.0)*new_r22*x305))+(((-1.0)*new_r22*x306))+((x309*x318))+((x307*x313))+(((-1.0)*x307*x318))+(((-1.0)*x309*x313)));
evalcond[15]=((0.867716279215787)+((x305*x318))+(((-1.0)*new_r22*x307))+((new_r22*x309))+(((-1.0)*x306*x313))+(((-1.0)*x305*x313))+((x306*x318)));
evalcond[16]=((-0.867716279215787)+(((-1.0)*new_r21*x306))+(((-1.0)*new_r21*x305))+(((-1.0)*x307*x320))+((x307*x317))+((x309*x320))+(((-1.0)*x309*x317)));
evalcond[17]=((0.497059814090729)+((new_r21*x309))+(((-1.0)*new_r21*x307))+((x305*x320))+(((-1.0)*x306*x317))+(((-1.0)*x305*x317))+((x306*x320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r11, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x321=IKsin(j5);
IkReal x322=IKcos(j5);
IkReal x323=(new_r20*sj6);
IkReal x324=((0.866025504730542)*new_r00);
IkReal x325=((0.866025504730542)*cj6);
IkReal x326=((0.00339151151387016)*cj6);
IkReal x327=((0.499999825156179)*sj6);
IkReal x328=((0.499999825156179)*cj6);
IkReal x329=((0.999994248808288)*cj6);
IkReal x330=((0.866025504730542)*sj6);
IkReal x331=(sj6*x321);
IkReal x332=(new_r11*x322);
IkReal x333=(new_r00*x321);
IkReal x334=(sj6*x322);
IkReal x335=(new_r12*x322);
IkReal x336=(new_r02*x321);
IkReal x337=((1.0)*x321);
IkReal x338=(new_r10*x322);
IkReal x339=(new_r01*x321);
IkReal x340=(new_r12*x334);
evalcond[0]=((((-1.0)*x322))+new_r01);
evalcond[1]=((((-1.0)*x337))+new_r11);
evalcond[2]=(((new_r12*x321))+((new_r02*x322)));
evalcond[3]=(((new_r00*x322))+((new_r10*x321)));
evalcond[4]=((-1.0)+((new_r01*x322))+((new_r11*x321)));
evalcond[5]=(x332+(((-1.0)*new_r01*x337)));
evalcond[6]=((((0.999994248808288)*x331))+new_r02+((x321*x326)));
evalcond[7]=((((-0.999994248808288)*x334))+(((-1.0)*x322*x326))+new_r12);
evalcond[8]=((((0.00339151151387016)*x331))+(((-1.0)*x321*x329))+new_r00);
evalcond[9]=((((-0.00339151151387016)*x334))+((x322*x329))+new_r10);
evalcond[10]=((((-0.999994248808288)*sj6))+(((-1.0)*x326))+x335+(((-1.0)*x336)));
evalcond[11]=((((-0.00339151151387016)*sj6))+x338+x329+(((-1.0)*x333)));
evalcond[12]=(((x327*x339))+((x325*x332))+(((-1.0)*x327*x332))+(((-1.0)*x325*x339)));
evalcond[13]=(((x330*x339))+(((-1.0)*x328*x332))+(((-1.0)*x330*x332))+((x328*x339)));
evalcond[14]=((0.497059814090729)+(((-1.0)*new_r22*x330))+(((-1.0)*new_r22*x328))+((x327*x336))+((x325*x335))+(((-1.0)*x327*x335))+(((-1.0)*x325*x336)));
evalcond[15]=((0.867716279215787)+((new_r22*x327))+(((-1.0)*new_r22*x325))+((x330*x336))+(((-1.0)*x328*x335))+(((-1.0)*x330*x335))+((x328*x336)));
evalcond[16]=((0.867716279215787)+(((-1.0)*cj6*x321*x324))+(((-0.866025504730542)*x323))+((x327*x333))+((x325*x338))+(((-1.0)*x327*x338))+(((-1.0)*new_r20*x328)));
evalcond[17]=((-0.497059814090729)+((x324*x331))+(((-1.0)*x328*x338))+(((0.499999825156179)*x323))+(((-1.0)*x330*x338))+((x328*x333))+(((-1.0)*new_r20*x325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r11), ((-1.0)*new_r01));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x341=IKsin(j5);
IkReal x342=IKcos(j5);
IkReal x343=(new_r20*sj6);
IkReal x344=((0.866025504730542)*new_r00);
IkReal x345=((0.866025504730542)*cj6);
IkReal x346=((0.00339151151387016)*cj6);
IkReal x347=((0.499999825156179)*sj6);
IkReal x348=((0.499999825156179)*cj6);
IkReal x349=((0.999994248808288)*cj6);
IkReal x350=((0.866025504730542)*sj6);
IkReal x351=(sj6*x341);
IkReal x352=(new_r11*x342);
IkReal x353=(new_r00*x341);
IkReal x354=(sj6*x342);
IkReal x355=(new_r12*x342);
IkReal x356=(new_r02*x341);
IkReal x357=(new_r10*x342);
IkReal x358=(new_r01*x341);
IkReal x359=(new_r12*x354);
evalcond[0]=(x342+new_r01);
evalcond[1]=(x341+new_r11);
evalcond[2]=(((new_r02*x342))+((new_r12*x341)));
evalcond[3]=(((new_r00*x342))+((new_r10*x341)));
evalcond[4]=((1.0)+((new_r11*x341))+((new_r01*x342)));
evalcond[5]=((((-1.0)*x358))+x352);
evalcond[6]=((((0.999994248808288)*x351))+((x341*x346))+new_r02);
evalcond[7]=((((-0.999994248808288)*x354))+new_r12+(((-1.0)*x342*x346)));
evalcond[8]=((((-0.00339151151387016)*x351))+((x341*x349))+new_r00);
evalcond[9]=(new_r10+(((0.00339151151387016)*x354))+(((-1.0)*x342*x349)));
evalcond[10]=((((-0.999994248808288)*sj6))+(((-1.0)*x356))+x355+(((-1.0)*x346)));
evalcond[11]=((((0.00339151151387016)*sj6))+(((-1.0)*x353))+x357+(((-1.0)*x349)));
evalcond[12]=(((x345*x352))+(((-1.0)*x345*x358))+((x347*x358))+(((-1.0)*x347*x352)));
evalcond[13]=((((-1.0)*x348*x352))+((x350*x358))+((x348*x358))+(((-1.0)*x350*x352)));
evalcond[14]=((0.497059814090729)+(((-1.0)*new_r22*x350))+((x345*x355))+(((-1.0)*x345*x356))+((x347*x356))+(((-1.0)*x347*x355))+(((-1.0)*new_r22*x348)));
evalcond[15]=((0.867716279215787)+((new_r22*x347))+(((-1.0)*x348*x355))+((x350*x356))+((x348*x356))+(((-1.0)*new_r22*x345))+(((-1.0)*x350*x355)));
evalcond[16]=((-0.867716279215787)+(((-0.866025504730542)*x343))+((x345*x357))+((x347*x353))+(((-1.0)*x347*x357))+(((-1.0)*new_r20*x348))+(((-1.0)*cj6*x341*x344)));
evalcond[17]=((0.497059814090729)+(((-1.0)*x348*x357))+(((0.499999825156179)*x343))+((x344*x351))+(((-1.0)*new_r20*x345))+((x348*x353))+(((-1.0)*x350*x357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j5eval[0]=sj6;
j5eval[1]=IKsign(sj6);
j5eval[2]=((1.0)+(new_r12*new_r12)+(((-1.0)*(new_r01*new_r01))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j5eval[0]=sj6;
j5eval[1]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j5eval[0]=new_r11;
j5eval[1]=sj6;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r01;
evalcond[5]=new_r11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  && IKabs(evalcond[5]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
j5array[0]=0;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r01;
evalcond[5]=new_r11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  && IKabs(evalcond[5]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
j5array[0]=0;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x362=IKPowWithIntegerCheck(sj6,-1);
if(!x362.valid){
continue;
}
IkReal x360=x362.value;
IkReal x361=(new_r12*x360);
CheckValue<IkReal> x363=IKPowWithIntegerCheck(new_r11,-1);
if(!x363.valid){
continue;
}
if( IKabs(((-0.999994248808288)*new_r01*x361*(x363.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.999994248808288)*x361)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.999994248808288)*new_r01*x361*(x363.value)))+IKsqr(((0.999994248808288)*x361))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-0.999994248808288)*new_r01*x361*(x363.value)), ((0.999994248808288)*x361));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x364=IKsin(j5);
IkReal x365=IKcos(j5);
IkReal x366=((1.00000575122479)*sj6);
IkReal x367=((0.867721269647162)*sj6);
IkReal x368=((0.497062672793453)*sj6);
IkReal x369=(new_r11*x365);
IkReal x370=(new_r02*x364);
IkReal x371=(new_r01*x364);
IkReal x372=(new_r12*sj6*x365);
evalcond[0]=(((new_r02*x365))+((new_r12*x364)));
evalcond[1]=(((new_r01*x365))+((new_r11*x364)));
evalcond[2]=(((x364*x366))+new_r02);
evalcond[3]=(new_r12+(((-1.0)*x365*x366)));
evalcond[4]=((((-1.0)*x371))+x369);
evalcond[5]=((((-1.0)*x370))+(((-1.0)*x366))+((new_r12*x365)));
evalcond[6]=(((x368*x371))+(((-1.0)*x368*x369)));
evalcond[7]=(((x367*x371))+(((-1.0)*x367*x369)));
evalcond[8]=((0.497059814090729)+(((-1.0)*new_r12*x365*x368))+((x368*x370)));
evalcond[9]=((0.867716279215787)+((x367*x370))+(((-1.0)*new_r12*x365*x367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x375=IKPowWithIntegerCheck(sj6,-1);
if(!x375.valid){
continue;
}
IkReal x373=x375.value;
IkReal x374=(new_r02*x373);
CheckValue<IkReal> x376=IKPowWithIntegerCheck(new_r01,-1);
if(!x376.valid){
continue;
}
if( IKabs(((-0.999994248808288)*x374)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.999994248808288)*new_r11*x374*(x376.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.999994248808288)*x374))+IKsqr(((0.999994248808288)*new_r11*x374*(x376.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-0.999994248808288)*x374), ((0.999994248808288)*new_r11*x374*(x376.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x377=IKsin(j5);
IkReal x378=IKcos(j5);
IkReal x379=((1.00000575122479)*sj6);
IkReal x380=((0.867721269647162)*sj6);
IkReal x381=((0.497062672793453)*sj6);
IkReal x382=(new_r11*x378);
IkReal x383=(new_r02*x377);
IkReal x384=(new_r01*x377);
IkReal x385=(new_r12*sj6*x378);
evalcond[0]=(((new_r12*x377))+((new_r02*x378)));
evalcond[1]=(((new_r01*x378))+((new_r11*x377)));
evalcond[2]=(((x377*x379))+new_r02);
evalcond[3]=((((-1.0)*x378*x379))+new_r12);
evalcond[4]=(x382+(((-1.0)*x384)));
evalcond[5]=(((new_r12*x378))+(((-1.0)*x379))+(((-1.0)*x383)));
evalcond[6]=((((-1.0)*x381*x382))+((x381*x384)));
evalcond[7]=((((-1.0)*x380*x382))+((x380*x384)));
evalcond[8]=((0.497059814090729)+(((-1.0)*new_r12*x378*x381))+((x381*x383)));
evalcond[9]=((0.867716279215787)+(((-1.0)*new_r12*x378*x380))+((x380*x383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x386=IKPowWithIntegerCheck(IKsign(sj6),-1);
if(!x386.valid){
continue;
}
CheckValue<IkReal> x387 = IKatan2WithCheck(IkReal(((-7.08338158920884e+26)*new_r02)),IkReal(((7.08338158920884e+26)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x387.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x386.value)))+(x387.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x388=IKsin(j5);
IkReal x389=IKcos(j5);
IkReal x390=((1.00000575122479)*sj6);
IkReal x391=((0.867721269647162)*sj6);
IkReal x392=((0.497062672793453)*sj6);
IkReal x393=(new_r11*x389);
IkReal x394=(new_r02*x388);
IkReal x395=(new_r01*x388);
IkReal x396=(new_r12*sj6*x389);
evalcond[0]=(((new_r02*x389))+((new_r12*x388)));
evalcond[1]=(((new_r01*x389))+((new_r11*x388)));
evalcond[2]=(new_r02+((x388*x390)));
evalcond[3]=((((-1.0)*x389*x390))+new_r12);
evalcond[4]=((((-1.0)*x395))+x393);
evalcond[5]=((((-1.0)*x390))+(((-1.0)*x394))+((new_r12*x389)));
evalcond[6]=((((-1.0)*x392*x393))+((x392*x395)));
evalcond[7]=((((-1.0)*x391*x393))+((x391*x395)));
evalcond[8]=((0.497059814090729)+(((-1.0)*new_r12*x389*x392))+((x392*x394)));
evalcond[9]=((0.867716279215787)+(((-1.0)*new_r12*x389*x391))+((x391*x394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r00=0;
new_r02=0;
new_r11=0;
new_r21=0;
j5eval[0]=sj7;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r00=0;
new_r02=0;
new_r11=0;
new_r21=0;
j5eval[0]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r00=0;
new_r02=0;
new_r11=0;
new_r21=0;
j5eval[0]=((((-1.0)*sj6*sj7))+(((294.852087253321)*cj6*sj7)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r20;
evalcond[3]=new_r10;
evalcond[4]=new_r01;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
j5array[0]=0;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r20;
evalcond[3]=new_r10;
evalcond[4]=new_r01;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
j5array[0]=0;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x397=IKPowWithIntegerCheck(((((-0.00339151151387016)*sj6*sj7))+(((0.999994248808288)*cj6*sj7))),-1);
if(!x397.valid){
continue;
}
cj5array[0]=((-1.0)*new_r10*(x397.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x398=IKsin(j5);
IkReal x399=IKcos(j5);
IkReal x400=sj6*sj6;
IkReal x401=((1.0)*sj7);
IkReal x402=(cj6*sj6);
IkReal x403=((255.849427509567)*sj6);
IkReal x404=((0.999994248808288)*cj6*sj7);
IkReal x405=(new_r12*x399);
IkReal x406=((0.00339151151387016)*sj6*sj7);
IkReal x407=(new_r10*x399);
IkReal x408=((-1.0)*x398);
IkReal x409=((146.559966568864)*sj6*x399);
IkReal x410=(new_r01*sj6*x398);
CheckValue<IkReal> x413=IKPowWithIntegerCheck(((((7.08338158920884e+26)*sj6))+(((2.402350838074e+24)*cj6))),-1);
if(!x413.valid){
continue;
}
IkReal x411=x413.value;
IkReal x412=(new_r20*x411);
evalcond[0]=(new_r12*x398);
evalcond[1]=(new_r10*x398);
evalcond[2]=x405;
evalcond[3]=(new_r01*x408);
evalcond[4]=(sj7*x408);
evalcond[5]=((((-1.0)*x399*x401))+new_r01);
evalcond[6]=(((new_r01*x399))+(((-1.0)*x401)));
evalcond[7]=(new_r01*x398*x403);
evalcond[8]=((-146.559966568864)*x410);
evalcond[9]=((((0.999994248808288)*sj6*x398))+(((0.00339151151387016)*cj6*x398)));
evalcond[10]=(x404+x407+(((-1.0)*x406)));
evalcond[11]=((((-1.0)*x398*x404))+((x398*x406)));
evalcond[12]=((0.497059814090729)+(((-1.0)*x403*x405))+(((146.559123674399)*x402))+(((-0.497059814090729)*x400)));
evalcond[13]=((0.867716279215787)+(((-0.867716279215787)*x400))+(((146.559966568864)*sj6*x405))+(((255.84795607046)*x402)));
evalcond[14]=((((6.14640086598362e+26)*x412))+(((-1.0)*x403*x407)));
evalcond[15]=((((-3.52088458514808e+26)*x412))+(((146.559966568864)*sj6*x407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x414=IKPowWithIntegerCheck(new_r01,-1);
if(!x414.valid){
continue;
}
cj5array[0]=(sj7*(x414.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x415=IKsin(j5);
IkReal x416=IKcos(j5);
IkReal x417=sj6*sj6;
IkReal x418=((0.00339151151387016)*sj6);
IkReal x419=(cj6*sj6);
IkReal x420=((255.849427509567)*sj6);
IkReal x421=((0.999994248808288)*cj6*sj7);
IkReal x422=(sj7*x416);
IkReal x423=(new_r12*x416);
IkReal x424=(sj6*x415);
IkReal x425=(new_r10*x416);
IkReal x426=((-1.0)*x415);
IkReal x427=((146.559966568864)*sj6*x416);
CheckValue<IkReal> x430=IKPowWithIntegerCheck(((((7.08338158920884e+26)*sj6))+(((2.402350838074e+24)*cj6))),-1);
if(!x430.valid){
continue;
}
IkReal x428=x430.value;
IkReal x429=(new_r20*x428);
evalcond[0]=(new_r12*x415);
evalcond[1]=(new_r10*x415);
evalcond[2]=x423;
evalcond[3]=(new_r01*x426);
evalcond[4]=(sj7*x426);
evalcond[5]=((((-1.0)*x422))+new_r01);
evalcond[6]=(new_r01*x415*x420);
evalcond[7]=((-146.559966568864)*new_r01*x424);
evalcond[8]=((((0.00339151151387016)*cj6*x415))+(((0.999994248808288)*x424)));
evalcond[9]=((((-1.0)*sj7*x418))+x425+x421);
evalcond[10]=(((sj7*x415*x418))+(((-1.0)*x415*x421)));
evalcond[11]=(((x416*x421))+(((-1.0)*x418*x422))+new_r10);
evalcond[12]=((0.497059814090729)+(((-1.0)*x420*x423))+(((146.559123674399)*x419))+(((-0.497059814090729)*x417)));
evalcond[13]=((0.867716279215787)+(((146.559966568864)*sj6*x423))+(((-0.867716279215787)*x417))+(((255.84795607046)*x419)));
evalcond[14]=((((-1.0)*x420*x425))+(((6.14640086598362e+26)*x429)));
evalcond[15]=((((146.559966568864)*sj6*x425))+(((-3.52088458514808e+26)*x429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x431=IKPowWithIntegerCheck(sj7,-1);
if(!x431.valid){
continue;
}
cj5array[0]=(new_r01*(x431.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x432=IKsin(j5);
IkReal x433=IKcos(j5);
IkReal x434=sj6*sj6;
IkReal x435=(cj6*sj6);
IkReal x436=((255.849427509567)*sj6);
IkReal x437=((0.999994248808288)*cj6*sj7);
IkReal x438=(new_r12*x433);
IkReal x439=((0.00339151151387016)*sj6*sj7);
IkReal x440=(sj6*x432);
IkReal x441=(new_r10*x433);
IkReal x442=((-1.0)*x432);
IkReal x443=((146.559966568864)*sj6*x433);
CheckValue<IkReal> x446=IKPowWithIntegerCheck(((((7.08338158920884e+26)*sj6))+(((2.402350838074e+24)*cj6))),-1);
if(!x446.valid){
continue;
}
IkReal x444=x446.value;
IkReal x445=(new_r20*x444);
evalcond[0]=(new_r12*x432);
evalcond[1]=(new_r10*x432);
evalcond[2]=x438;
evalcond[3]=(new_r01*x442);
evalcond[4]=(sj7*x442);
evalcond[5]=(((new_r01*x433))+(((-1.0)*sj7)));
evalcond[6]=(new_r01*x432*x436);
evalcond[7]=((-146.559966568864)*new_r01*x440);
evalcond[8]=((((0.00339151151387016)*cj6*x432))+(((0.999994248808288)*x440)));
evalcond[9]=((((-1.0)*x439))+x437+x441);
evalcond[10]=((((-1.0)*x432*x437))+((x432*x439)));
evalcond[11]=((((-1.0)*x433*x439))+((x433*x437))+new_r10);
evalcond[12]=((0.497059814090729)+(((-0.497059814090729)*x434))+(((-1.0)*x436*x438))+(((146.559123674399)*x435)));
evalcond[13]=((0.867716279215787)+(((146.559966568864)*sj6*x438))+(((255.84795607046)*x435))+(((-0.867716279215787)*x434)));
evalcond[14]=((((-1.0)*x436*x441))+(((6.14640086598362e+26)*x445)));
evalcond[15]=((((-3.52088458514808e+26)*x445))+(((146.559966568864)*sj6*x441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r10=0;
new_r12=0;
new_r21=0;
new_r01=0;
j5eval[0]=sj7;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r10=0;
new_r12=0;
new_r21=0;
new_r01=0;
j5eval[0]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r10=0;
new_r12=0;
new_r21=0;
new_r01=0;
j5eval[0]=((((-294.852087253321)*cj6*sj7))+((sj6*sj7)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r00;
evalcond[4]=new_r11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r10=0;
new_r12=0;
new_r21=0;
new_r01=0;
sj7=0;
cj7=1.0;
j7=0;
j5eval[0]=IKabs((cj6+(((294.852087253321)*sj6))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x447=((294.852087253321)*sj6);
op[0]=(cj6+x447);
op[1]=0;
op[2]=((((-1.0)*x447))+(((-1.0)*cj6)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r00;
evalcond[4]=new_r11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r10=0;
new_r12=0;
new_r21=0;
new_r01=0;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5eval[0]=IKabs((cj6+(((294.852087253321)*sj6))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x448=((294.852087253321)*sj6);
op[0]=(cj6+x448);
op[1]=0;
op[2]=((((-1.0)*x448))+(((-1.0)*cj6)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x449=IKPowWithIntegerCheck(((((0.00339151151387016)*sj6*sj7))+(((-0.999994248808288)*cj6*sj7))),-1);
if(!x449.valid){
continue;
}
sj5array[0]=((-1.0)*new_r00*(x449.value));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x450=IKcos(j5);
IkReal x451=IKsin(j5);
IkReal x452=sj6*sj6;
IkReal x453=((0.00339151151387016)*sj7);
IkReal x454=(cj6*sj6);
IkReal x455=((146.559966568864)*sj6);
IkReal x456=(new_r11*x450);
IkReal x457=((1.0)*x451);
IkReal x458=((0.999994248808288)*cj6*sj7);
IkReal x459=(sj6*x450);
IkReal x460=(new_r02*x451);
IkReal x461=((255.849427509567)*sj6*x451);
CheckValue<IkReal> x464=IKPowWithIntegerCheck(((((7.08338158920884e+26)*sj6))+(((2.402350838074e+24)*cj6))),-1);
if(!x464.valid){
continue;
}
IkReal x462=x464.value;
IkReal x463=(new_r20*x462);
evalcond[0]=(new_r02*x450);
evalcond[1]=(new_r00*x450);
evalcond[2]=x456;
evalcond[3]=((-1.0)*x460);
evalcond[4]=((-1.0)*sj7*x450);
evalcond[5]=((((-1.0)*sj7*x457))+new_r11);
evalcond[6]=((((-1.0)*sj7))+((new_r11*x451)));
evalcond[7]=((-255.849427509567)*sj6*x456);
evalcond[8]=(x455*x456);
evalcond[9]=((((-0.999994248808288)*x459))+(((-0.00339151151387016)*cj6*x450)));
evalcond[10]=((((-1.0)*new_r00*x457))+x458+(((-1.0)*sj6*x453)));
evalcond[11]=((((-1.0)*x453*x459))+((x450*x458)));
evalcond[12]=((0.497059814090729)+(((-0.497059814090729)*x452))+(((255.849427509567)*sj6*x460))+(((146.559123674399)*x454)));
evalcond[13]=((0.867716279215787)+(((255.84795607046)*x454))+(((-0.867716279215787)*x452))+(((-1.0)*x455*x460)));
evalcond[14]=(((new_r00*x461))+(((6.14640086598362e+26)*x463)));
evalcond[15]=((((-3.52088458514808e+26)*x463))+(((-1.0)*new_r00*x451*x455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x465=IKPowWithIntegerCheck(new_r11,-1);
if(!x465.valid){
continue;
}
sj5array[0]=(sj7*(x465.value));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x466=IKcos(j5);
IkReal x467=IKsin(j5);
IkReal x468=sj6*sj6;
IkReal x469=((0.00339151151387016)*sj7);
IkReal x470=(cj6*sj6);
IkReal x471=((146.559966568864)*sj6);
IkReal x472=((0.999994248808288)*cj6*sj7);
IkReal x473=(new_r11*x466);
IkReal x474=((1.0)*x467);
IkReal x475=(sj6*x466);
IkReal x476=(new_r02*x467);
IkReal x477=((255.849427509567)*sj6*x467);
CheckValue<IkReal> x480=IKPowWithIntegerCheck(((((7.08338158920884e+26)*sj6))+(((2.402350838074e+24)*cj6))),-1);
if(!x480.valid){
continue;
}
IkReal x478=x480.value;
IkReal x479=(new_r20*x478);
evalcond[0]=(new_r02*x466);
evalcond[1]=(new_r00*x466);
evalcond[2]=x473;
evalcond[3]=((-1.0)*x476);
evalcond[4]=((-1.0)*sj7*x466);
evalcond[5]=((((-1.0)*sj7*x474))+new_r11);
evalcond[6]=((-255.849427509567)*sj6*x473);
evalcond[7]=(x471*x473);
evalcond[8]=((((-0.999994248808288)*x475))+(((-0.00339151151387016)*cj6*x466)));
evalcond[9]=((((-1.0)*new_r00*x474))+x472+(((-1.0)*sj6*x469)));
evalcond[10]=((((-1.0)*x469*x475))+((x466*x472)));
evalcond[11]=((((-1.0)*x467*x472))+new_r00+((sj6*x467*x469)));
evalcond[12]=((0.497059814090729)+(((146.559123674399)*x470))+(((-0.497059814090729)*x468))+(((255.849427509567)*sj6*x476)));
evalcond[13]=((0.867716279215787)+(((-0.867716279215787)*x468))+(((255.84795607046)*x470))+(((-1.0)*x471*x476)));
evalcond[14]=(((new_r00*x477))+(((6.14640086598362e+26)*x479)));
evalcond[15]=((((-3.52088458514808e+26)*x479))+(((-1.0)*new_r00*x467*x471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x481=IKPowWithIntegerCheck(sj7,-1);
if(!x481.valid){
continue;
}
sj5array[0]=(new_r11*(x481.value));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x482=IKcos(j5);
IkReal x483=IKsin(j5);
IkReal x484=sj6*sj6;
IkReal x485=((255.849427509567)*sj6);
IkReal x486=((0.00339151151387016)*sj7);
IkReal x487=(cj6*sj6);
IkReal x488=((146.559966568864)*sj6);
IkReal x489=((0.999994248808288)*cj6*sj7);
IkReal x490=(new_r11*x482);
IkReal x491=(new_r00*x483);
IkReal x492=(new_r02*x483);
IkReal x493=(sj6*x482);
CheckValue<IkReal> x496=IKPowWithIntegerCheck(((((7.08338158920884e+26)*sj6))+(((2.402350838074e+24)*cj6))),-1);
if(!x496.valid){
continue;
}
IkReal x494=x496.value;
IkReal x495=(new_r20*x494);
evalcond[0]=(new_r02*x482);
evalcond[1]=(new_r00*x482);
evalcond[2]=x490;
evalcond[3]=((-1.0)*x492);
evalcond[4]=((-1.0)*sj7*x482);
evalcond[5]=((((-1.0)*sj7))+((new_r11*x483)));
evalcond[6]=((-255.849427509567)*sj6*x490);
evalcond[7]=(x488*x490);
evalcond[8]=((((-0.00339151151387016)*cj6*x482))+(((-0.999994248808288)*x493)));
evalcond[9]=((((-1.0)*x491))+x489+(((-1.0)*sj6*x486)));
evalcond[10]=((((-1.0)*x486*x493))+((x482*x489)));
evalcond[11]=((((-1.0)*x483*x489))+((sj6*x483*x486))+new_r00);
evalcond[12]=((0.497059814090729)+(((-0.497059814090729)*x484))+((x485*x492))+(((146.559123674399)*x487)));
evalcond[13]=((0.867716279215787)+(((-1.0)*x488*x492))+(((-0.867716279215787)*x484))+(((255.84795607046)*x487)));
evalcond[14]=((((6.14640086598362e+26)*x495))+((x485*x491)));
evalcond[15]=((((-1.0)*x488*x491))+(((-3.52088458514808e+26)*x495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=65458.9295569734;
j5eval[1]=sj6;
j5eval[2]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r00;
evalcond[2]=new_r10;
evalcond[3]=new_r01;
evalcond[4]=new_r11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj6=0;
cj6=1.0;
j6=0;
j5eval[0]=1.0;
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r00;
evalcond[2]=new_r10;
evalcond[3]=new_r01;
evalcond[4]=new_r11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j5eval[0]=1.0;
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x498 = IKatan2WithCheck(IkReal(((-255.849427509567)*new_r10*sj6)),IkReal(((255.849427509567)*new_r00*sj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x498.valid){
continue;
}
IkReal x497=x498.value;
j5array[0]=((-1.0)*x497);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x497)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x499=IKsin(j5);
IkReal x500=IKcos(j5);
IkReal x501=((0.00339151151387016)*cj6);
IkReal x502=((146.559966568864)*sj6);
IkReal x503=(sj6*x500);
IkReal x504=(new_r00*x499);
IkReal x505=(sj6*x499);
IkReal x506=(new_r01*x499);
evalcond[0]=(((new_r10*x499))+((new_r00*x500)));
evalcond[1]=(((new_r11*x499))+((new_r01*x500)));
evalcond[2]=(((new_r10*x500))+(((-1.0)*x504)));
evalcond[3]=(((new_r11*x500))+(((-1.0)*x506)));
evalcond[4]=((((0.999994248808288)*x505))+((x499*x501)));
evalcond[5]=((((-0.999994248808288)*x503))+(((-1.0)*x500*x501)));
evalcond[6]=((((255.849427509567)*new_r01*x505))+(((-255.849427509567)*new_r11*x503)));
evalcond[7]=(((new_r10*x500*x502))+(((-1.0)*x502*x504)));
evalcond[8]=(((new_r11*x500*x502))+(((-1.0)*x502*x506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x508 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x508.valid){
continue;
}
IkReal x507=x508.value;
j5array[0]=((-1.0)*x507);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x507)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x509=IKcos(j5);
IkReal x510=IKsin(j5);
IkReal x511=((0.00339151151387016)*cj6);
IkReal x512=(sj6*x509);
IkReal x513=((1.0)*x510);
IkReal x514=(sj6*x510);
IkReal x515=(new_r00*x514);
evalcond[0]=(((new_r10*x510))+((new_r00*x509)));
evalcond[1]=(((new_r10*x509))+(((-1.0)*new_r00*x513)));
evalcond[2]=(((new_r11*x509))+(((-1.0)*new_r01*x513)));
evalcond[3]=(((x510*x511))+(((0.999994248808288)*x514)));
evalcond[4]=((((-0.999994248808288)*x512))+(((-1.0)*x509*x511)));
evalcond[5]=((((255.849427509567)*x515))+(((-255.849427509567)*new_r10*x512)));
evalcond[6]=((((255.849427509567)*new_r01*x514))+(((-255.849427509567)*new_r11*x512)));
evalcond[7]=((((-146.559966568864)*x515))+(((146.559966568864)*new_r10*x512)));
evalcond[8]=((((-146.559966568864)*new_r01*x514))+(((146.559966568864)*new_r11*x512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x517 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x517.valid){
continue;
}
IkReal x516=x517.value;
j5array[0]=((-1.0)*x516);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x516)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x518=IKcos(j5);
IkReal x519=IKsin(j5);
IkReal x520=((0.00339151151387016)*cj6);
IkReal x521=(sj6*x518);
IkReal x522=(sj6*x519);
IkReal x523=((1.0)*x519);
IkReal x524=((255.849427509567)*x521);
evalcond[0]=(((new_r01*x518))+((new_r11*x519)));
evalcond[1]=(((new_r10*x518))+(((-1.0)*new_r00*x523)));
evalcond[2]=(((new_r11*x518))+(((-1.0)*new_r01*x523)));
evalcond[3]=(((x519*x520))+(((0.999994248808288)*x522)));
evalcond[4]=((((-0.999994248808288)*x521))+(((-1.0)*x518*x520)));
evalcond[5]=((((-1.0)*new_r10*x524))+(((255.849427509567)*new_r00*x522)));
evalcond[6]=((((-1.0)*new_r11*x524))+(((255.849427509567)*new_r01*x522)));
evalcond[7]=((((146.559966568864)*new_r10*x521))+(((-146.559966568864)*new_r00*x522)));
evalcond[8]=((((146.559966568864)*new_r11*x521))+(((-146.559966568864)*new_r01*x522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x525=IKPowWithIntegerCheck(IKsign(((((0.999994248808288)*sj6))+(((0.00339151151387016)*cj6)))),-1);
if(!x525.valid){
continue;
}
CheckValue<IkReal> x526 = IKatan2WithCheck(IkReal(((-1.0)*new_r02)),IkReal(new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x526.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x525.value)))+(x526.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x527=IKsin(j5);
IkReal x528=IKcos(j5);
IkReal x529=((0.866025504730542)*cj6);
IkReal x530=((1.0)*sj7);
IkReal x531=((0.00339151151387016)*cj6);
IkReal x532=((0.499999825156179)*sj6);
IkReal x533=((0.999994248808288)*cj6);
IkReal x534=((0.499999825156179)*cj6);
IkReal x535=((0.866025504730542)*sj6);
IkReal x536=((0.999994248808288)*sj6);
IkReal x537=((0.00339151151387016)*cj7*sj6);
IkReal x538=(new_r11*x528);
IkReal x539=(new_r00*x527);
IkReal x540=(new_r12*x528);
IkReal x541=((0.00339151151387016)*sj6*sj7);
IkReal x542=(new_r02*x527);
IkReal x543=(new_r10*x528);
IkReal x544=(cj7*x528);
IkReal x545=(new_r01*x527);
IkReal x546=(sj6*x540);
IkReal x547=(x527*x533);
evalcond[0]=(((new_r02*x528))+((new_r12*x527)));
evalcond[1]=(cj7+((new_r10*x527))+((new_r00*x528)));
evalcond[2]=(((new_r01*x528))+((new_r11*x527))+(((-1.0)*x530)));
evalcond[3]=(new_r02+((x527*x536))+((x527*x531)));
evalcond[4]=((((-1.0)*x528*x531))+(((-1.0)*x528*x536))+new_r12);
evalcond[5]=((((-1.0)*x542))+(((-1.0)*x536))+(((-1.0)*x531))+x540);
evalcond[6]=((((-1.0)*x539))+(((-1.0)*x541))+x543+((sj7*x533)));
evalcond[7]=(((cj7*x533))+(((-1.0)*x545))+(((-1.0)*x537))+x538);
evalcond[8]=((((-1.0)*sj7*x547))+x544+new_r00+((x527*x541)));
evalcond[9]=(((cj7*x527))+(((-1.0)*x528*x541))+new_r10+((sj7*x528*x533)));
evalcond[10]=((((-1.0)*x528*x530))+(((-1.0)*cj7*x547))+new_r01+((x527*x537)));
evalcond[11]=((((-1.0)*x527*x530))+(((-1.0)*x528*x537))+new_r11+((x533*x544)));
evalcond[12]=((0.497059814090729)+(((-1.0)*x532*x540))+(((-1.0)*new_r22*x534))+(((-1.0)*new_r22*x535))+(((-1.0)*x529*x542))+((x529*x540))+((x532*x542)));
evalcond[13]=((0.867716279215787)+(((-1.0)*new_r22*x529))+(((-1.0)*x534*x540))+(((-1.0)*x535*x540))+((x535*x542))+((x534*x542))+((new_r22*x532)));
evalcond[14]=((((-1.0)*x532*x543))+(((-1.0)*x529*x539))+(((0.867716279215787)*sj7))+(((-1.0)*new_r20*x534))+(((-1.0)*new_r20*x535))+((x529*x543))+((x532*x539)));
evalcond[15]=((((-1.0)*x532*x538))+(((-1.0)*x529*x545))+(((-1.0)*new_r21*x534))+(((-1.0)*new_r21*x535))+(((0.867716279215787)*cj7))+((x529*x538))+((x532*x545)));
evalcond[16]=((((-1.0)*x534*x543))+(((-1.0)*new_r20*x529))+((x534*x539))+(((-0.497059814090729)*sj7))+(((-1.0)*x535*x543))+((new_r20*x532))+((x535*x539)));
evalcond[17]=((((-1.0)*x534*x538))+(((-0.497059814090729)*cj7))+(((-1.0)*new_r21*x529))+((x535*x545))+((x534*x545))+(((-1.0)*x535*x538))+((new_r21*x532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x548=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r01*new_r12))+((new_r02*new_r11)))),-1);
if(!x548.valid){
continue;
}
CheckValue<IkReal> x549 = IKatan2WithCheck(IkReal((new_r02*sj7)),IkReal(((-1.0)*new_r12*sj7)),IKFAST_ATAN2_MAGTHRESH);
if(!x549.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x548.value)))+(x549.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x550=IKsin(j5);
IkReal x551=IKcos(j5);
IkReal x552=((0.866025504730542)*cj6);
IkReal x553=((1.0)*sj7);
IkReal x554=((0.00339151151387016)*cj6);
IkReal x555=((0.499999825156179)*sj6);
IkReal x556=((0.999994248808288)*cj6);
IkReal x557=((0.499999825156179)*cj6);
IkReal x558=((0.866025504730542)*sj6);
IkReal x559=((0.999994248808288)*sj6);
IkReal x560=((0.00339151151387016)*cj7*sj6);
IkReal x561=(new_r11*x551);
IkReal x562=(new_r00*x550);
IkReal x563=(new_r12*x551);
IkReal x564=((0.00339151151387016)*sj6*sj7);
IkReal x565=(new_r02*x550);
IkReal x566=(new_r10*x551);
IkReal x567=(cj7*x551);
IkReal x568=(new_r01*x550);
IkReal x569=(sj6*x563);
IkReal x570=(x550*x556);
evalcond[0]=(((new_r02*x551))+((new_r12*x550)));
evalcond[1]=(cj7+((new_r10*x550))+((new_r00*x551)));
evalcond[2]=(((new_r11*x550))+(((-1.0)*x553))+((new_r01*x551)));
evalcond[3]=(((x550*x554))+((x550*x559))+new_r02);
evalcond[4]=((((-1.0)*x551*x554))+(((-1.0)*x551*x559))+new_r12);
evalcond[5]=((((-1.0)*x559))+(((-1.0)*x554))+x563+(((-1.0)*x565)));
evalcond[6]=(x566+(((-1.0)*x562))+((sj7*x556))+(((-1.0)*x564)));
evalcond[7]=(((cj7*x556))+x561+(((-1.0)*x568))+(((-1.0)*x560)));
evalcond[8]=(((x550*x564))+(((-1.0)*sj7*x570))+x567+new_r00);
evalcond[9]=(((cj7*x550))+((sj7*x551*x556))+new_r10+(((-1.0)*x551*x564)));
evalcond[10]=(((x550*x560))+(((-1.0)*x551*x553))+new_r01+(((-1.0)*cj7*x570)));
evalcond[11]=(((x556*x567))+(((-1.0)*x550*x553))+new_r11+(((-1.0)*x551*x560)));
evalcond[12]=((0.497059814090729)+(((-1.0)*x552*x565))+(((-1.0)*new_r22*x558))+(((-1.0)*new_r22*x557))+(((-1.0)*x555*x563))+((x552*x563))+((x555*x565)));
evalcond[13]=((0.867716279215787)+((x558*x565))+(((-1.0)*new_r22*x552))+(((-1.0)*x558*x563))+(((-1.0)*x557*x563))+((x557*x565))+((new_r22*x555)));
evalcond[14]=((((-1.0)*x552*x562))+(((0.867716279215787)*sj7))+(((-1.0)*x555*x566))+((x552*x566))+(((-1.0)*new_r20*x558))+(((-1.0)*new_r20*x557))+((x555*x562)));
evalcond[15]=((((-1.0)*x552*x568))+(((-1.0)*new_r21*x557))+(((-1.0)*new_r21*x558))+(((-1.0)*x555*x561))+((x552*x561))+(((0.867716279215787)*cj7))+((x555*x568)));
evalcond[16]=(((x558*x562))+(((-1.0)*x558*x566))+(((-1.0)*x557*x566))+(((-1.0)*new_r20*x552))+((new_r20*x555))+(((-0.497059814090729)*sj7))+((x557*x562)));
evalcond[17]=(((new_r21*x555))+((x558*x568))+(((-1.0)*x558*x561))+(((-1.0)*new_r21*x552))+(((-0.497059814090729)*cj7))+(((-1.0)*x557*x561))+((x557*x568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x571=IKPowWithIntegerCheck(IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)))),-1);
if(!x571.valid){
continue;
}
CheckValue<IkReal> x572 = IKatan2WithCheck(IkReal((cj7*new_r02)),IkReal(((-1.0)*cj7*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x572.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x571.value)))+(x572.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x573=IKsin(j5);
IkReal x574=IKcos(j5);
IkReal x575=((0.866025504730542)*cj6);
IkReal x576=((1.0)*sj7);
IkReal x577=((0.00339151151387016)*cj6);
IkReal x578=((0.499999825156179)*sj6);
IkReal x579=((0.999994248808288)*cj6);
IkReal x580=((0.499999825156179)*cj6);
IkReal x581=((0.866025504730542)*sj6);
IkReal x582=((0.999994248808288)*sj6);
IkReal x583=((0.00339151151387016)*cj7*sj6);
IkReal x584=(new_r11*x574);
IkReal x585=(new_r00*x573);
IkReal x586=(new_r12*x574);
IkReal x587=((0.00339151151387016)*sj6*sj7);
IkReal x588=(new_r02*x573);
IkReal x589=(new_r10*x574);
IkReal x590=(cj7*x574);
IkReal x591=(new_r01*x573);
IkReal x592=(sj6*x586);
IkReal x593=(x573*x579);
evalcond[0]=(((new_r12*x573))+((new_r02*x574)));
evalcond[1]=(((new_r00*x574))+cj7+((new_r10*x573)));
evalcond[2]=(((new_r11*x573))+((new_r01*x574))+(((-1.0)*x576)));
evalcond[3]=(((x573*x577))+((x573*x582))+new_r02);
evalcond[4]=((((-1.0)*x574*x577))+(((-1.0)*x574*x582))+new_r12);
evalcond[5]=((((-1.0)*x588))+(((-1.0)*x577))+x586+(((-1.0)*x582)));
evalcond[6]=((((-1.0)*x585))+((sj7*x579))+x589+(((-1.0)*x587)));
evalcond[7]=(((cj7*x579))+(((-1.0)*x591))+x584+(((-1.0)*x583)));
evalcond[8]=(((x573*x587))+x590+(((-1.0)*sj7*x593))+new_r00);
evalcond[9]=(((cj7*x573))+(((-1.0)*x574*x587))+new_r10+((sj7*x574*x579)));
evalcond[10]=((((-1.0)*x574*x576))+((x573*x583))+(((-1.0)*cj7*x593))+new_r01);
evalcond[11]=((((-1.0)*x573*x576))+((x579*x590))+(((-1.0)*x574*x583))+new_r11);
evalcond[12]=((0.497059814090729)+((x578*x588))+(((-1.0)*x578*x586))+(((-1.0)*new_r22*x580))+(((-1.0)*new_r22*x581))+((x575*x586))+(((-1.0)*x575*x588)));
evalcond[13]=((0.867716279215787)+(((-1.0)*x580*x586))+((x581*x588))+((x580*x588))+(((-1.0)*new_r22*x575))+((new_r22*x578))+(((-1.0)*x581*x586)));
evalcond[14]=(((x578*x585))+(((-1.0)*x578*x589))+(((0.867716279215787)*sj7))+(((-1.0)*new_r20*x581))+(((-1.0)*new_r20*x580))+((x575*x589))+(((-1.0)*x575*x585)));
evalcond[15]=((((-1.0)*x578*x584))+((x578*x591))+((x575*x584))+(((-1.0)*new_r21*x581))+(((-1.0)*new_r21*x580))+(((0.867716279215787)*cj7))+(((-1.0)*x575*x591)));
evalcond[16]=((((-1.0)*x580*x589))+((x581*x585))+((x580*x585))+((new_r20*x578))+(((-1.0)*new_r20*x575))+(((-0.497059814090729)*sj7))+(((-1.0)*x581*x589)));
evalcond[17]=((((-1.0)*x580*x584))+((new_r21*x578))+(((-0.497059814090729)*cj7))+((x581*x591))+((x580*x591))+(((-1.0)*new_r21*x575))+(((-1.0)*x581*x584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x594=IKPowWithIntegerCheck(IKsign(((((0.999994248808288)*sj6))+(((0.00339151151387016)*cj6)))),-1);
if(!x594.valid){
continue;
}
CheckValue<IkReal> x595 = IKatan2WithCheck(IkReal(((-1.0)*new_r02)),IkReal(new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x595.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x594.value)))+(x595.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x596=IKsin(j5);
IkReal x597=IKcos(j5);
IkReal x598=((0.866025504730542)*cj6);
IkReal x599=((0.00339151151387016)*cj6);
IkReal x600=((0.499999825156179)*sj6);
IkReal x601=((0.499999825156179)*cj6);
IkReal x602=((0.999994248808288)*sj6);
IkReal x603=((0.866025504730542)*sj6);
IkReal x604=(new_r02*x596);
IkReal x605=(new_r12*x597);
IkReal x606=(sj6*x605);
evalcond[0]=(((new_r12*x596))+((new_r02*x597)));
evalcond[1]=(((x596*x602))+((x596*x599))+new_r02);
evalcond[2]=((((-1.0)*x597*x599))+(((-1.0)*x597*x602))+new_r12);
evalcond[3]=((((-1.0)*x604))+(((-1.0)*x599))+x605+(((-1.0)*x602)));
evalcond[4]=((0.497059814090729)+(((-1.0)*new_r22*x603))+(((-1.0)*new_r22*x601))+((x600*x604))+(((-1.0)*x598*x604))+(((-1.0)*x600*x605))+((x598*x605)));
evalcond[5]=((0.867716279215787)+(((-1.0)*x603*x605))+((new_r22*x600))+((x601*x604))+((x603*x604))+(((-1.0)*new_r22*x598))+(((-1.0)*x601*x605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs((((new_r11*sj5))+((cj5*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*new_r00))+(((-1.0)*new_r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*sj5))+((cj5*new_r01))))+IKsqr(((((-1.0)*cj5*new_r00))+(((-1.0)*new_r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((new_r11*sj5))+((cj5*new_r01))), ((((-1.0)*cj5*new_r00))+(((-1.0)*new_r10*sj5))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[14];
IkReal x607=IKsin(j7);
IkReal x608=IKcos(j7);
IkReal x609=((0.00339151151387016)*sj6);
IkReal x610=((0.866025504730542)*cj6);
IkReal x611=(cj5*new_r10);
IkReal x612=((0.866025504730542)*sj6);
IkReal x613=(new_r01*sj5);
IkReal x614=((0.499999825156179)*cj6);
IkReal x615=((0.999994248808288)*cj6);
IkReal x616=(new_r00*sj5);
IkReal x617=((0.499999825156179)*sj6);
IkReal x618=((0.999994248808288)*sj6);
IkReal x619=(cj5*new_r11);
IkReal x620=(sj5*x608);
IkReal x621=(cj5*x608);
IkReal x622=((0.499999825156179)*x619);
IkReal x623=(cj6*x607);
IkReal x624=(cj6*x608);
IkReal x625=(cj5*x607);
IkReal x626=(sj5*x607);
evalcond[0]=(((new_r10*sj5))+((cj5*new_r00))+x608);
evalcond[1]=(((new_r11*sj5))+((cj5*new_r01))+(((-1.0)*x607)));
evalcond[2]=((((-1.0)*x607*x618))+new_r20+(((-0.00339151151387016)*x623)));
evalcond[3]=(new_r21+(((-0.00339151151387016)*x624))+(((-1.0)*x608*x618)));
evalcond[4]=((((-1.0)*x616))+((x607*x615))+x611+(((-1.0)*x607*x609)));
evalcond[5]=(((x608*x615))+(((-1.0)*x608*x609))+(((-1.0)*x613))+x619);
evalcond[6]=(((x609*x626))+x621+new_r00+(((-1.0)*x615*x626)));
evalcond[7]=(x620+(((-1.0)*x609*x625))+new_r10+((x615*x625)));
evalcond[8]=(((x609*x620))+(((-1.0)*x625))+new_r01+(((-1.0)*x615*x620)));
evalcond[9]=((((-1.0)*x626))+(((-1.0)*x609*x621))+new_r11+((x615*x621)));
evalcond[10]=((((-1.0)*x610*x616))+(((-1.0)*x611*x617))+(((0.867716279215787)*x607))+((x616*x617))+((x610*x611))+(((-1.0)*new_r20*x612))+(((-1.0)*new_r20*x614)));
evalcond[11]=((((-1.0)*new_r21*x612))+(((-1.0)*new_r21*x614))+(((-1.0)*x610*x613))+(((0.867716279215787)*x608))+(((-1.0)*x617*x619))+((x613*x617))+((x610*x619)));
evalcond[12]=((((-1.0)*x611*x614))+(((-1.0)*x611*x612))+((x612*x616))+((new_r20*x617))+(((-0.497059814090729)*x607))+((x614*x616))+(((-1.0)*new_r20*x610)));
evalcond[13]=((((-1.0)*x612*x619))+((new_r21*x617))+(((-1.0)*x614*x619))+(((-1.0)*new_r21*x610))+((x612*x613))+(((-0.497059814090729)*x608))+((x613*x614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 17;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "3b6872c2d5f3e7120e8bc305a4199fd7"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
